Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program2 program3 main_ahead main_method
Rule 2     main_ahead -> <empty>
Rule 3     program2 -> variable_declaration program2
Rule 4     program2 -> empty
Rule 5     program3 -> method_declaration program3
Rule 6     program3 -> empty
Rule 7     variable_declaration -> type variable_declaration2
Rule 8     variable_declaration2 -> variable_declarator variable_declaration3
Rule 9     variable_declaration3 -> COMMA variable_declaration2
Rule 10    variable_declaration3 -> SEMICOLON
Rule 11    variable_declarator -> ID seen_id variable_declarator2 variable_declarator3
Rule 12    seen_id -> <empty>
Rule 13    variable_declarator2 -> LSQUARE CSTINT RSQUARE
Rule 14    variable_declarator2 -> empty
Rule 15    variable_declarator3 -> = superexpression
Rule 16    variable_declarator3 -> empty
Rule 17    method_declaration -> FUNC type ID seen_function_id ( method_declaration2 method_declaration3
Rule 18    seen_function_id -> <empty>
Rule 19    method_declaration2 -> parameter_list
Rule 20    method_declaration2 -> empty
Rule 21    method_declaration3 -> ) seen_method_start block_statement
Rule 22    seen_method_start -> <empty>
Rule 23    parameter_list -> parameter parameter_list2
Rule 24    parameter_list2 -> COMMA parameter_list
Rule 25    parameter_list2 -> empty
Rule 26    parameter -> type ID
Rule 27    main_method -> MAIN CHEESE ( ) block_statement
Rule 28    type -> INT
Rule 29    type -> DOUBLE
Rule 30    type -> STRING
Rule 31    type -> VOID
Rule 32    variable_assignment -> ID id_or_array
Rule 33    id_or_array -> = superexpression
Rule 34    id_or_array -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE = superexpression
Rule 35    superexpression -> expression superexpression2
Rule 36    superexpression2 -> andor superexpression
Rule 37    superexpression2 -> empty
Rule 38    andor -> AND
Rule 39    andor -> OR
Rule 40    expression -> numeric_expression compare
Rule 41    compare -> compare_symbols numeric_expression seen_comp
Rule 42    compare -> empty
Rule 43    compare_symbols -> CEQ
Rule 44    compare_symbols -> CGT
Rule 45    compare_symbols -> CGE
Rule 46    compare_symbols -> CLT
Rule 47    compare_symbols -> CLE
Rule 48    compare_symbols -> CNE
Rule 49    seen_comp -> <empty>
Rule 50    numeric_expression -> term seen_term numeric_expression2
Rule 51    seen_term -> <empty>
Rule 52    numeric_expression2 -> arithOp numeric_expression
Rule 53    numeric_expression2 -> empty
Rule 54    arithOp -> +
Rule 55    arithOp -> -
Rule 56    term -> factor term2
Rule 57    term2 -> geomOp term
Rule 58    term2 -> empty
Rule 59    geomOp -> *
Rule 60    geomOp -> /
Rule 61    factor -> cst_expression
Rule 62    factor -> ( seen_lpar superexpression ) seen_rpar
Rule 63    seen_lpar -> <empty>
Rule 64    seen_rpar -> <empty>
Rule 65    cst_expression -> CSTDOUBLE
Rule 66    cst_expression -> CSTINT
Rule 67    cst_expression -> CSTSTRING
Rule 68    cst_expression -> ID seen_id_or_func cst_expression2
Rule 69    seen_id_or_func -> <empty>
Rule 70    cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE
Rule 71    cst_expression2 -> function_call
Rule 72    cst_expression2 -> empty
Rule 73    seen_LSQUARE -> <empty>
Rule 74    seen_RSQUARE -> <empty>
Rule 75    function_call -> seen_func_id ( args )
Rule 76    seen_func_id -> <empty>
Rule 77    args -> arg
Rule 78    args -> empty
Rule 79    arg -> numeric_expression seen_arg more_args
Rule 80    seen_arg -> <empty>
Rule 81    more_args -> COMMA arg
Rule 82    more_args -> empty
Rule 83    loop_statement -> loophead block_statement seen_loop_block
Rule 84    loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 )
Rule 85    loophead -> WHILE ( seen_while_LPAR superexpression seen_while_exp )
Rule 86    seen_assignment1 -> <empty>
Rule 87    seen_for_exp -> <empty>
Rule 88    seen_assignment2 -> <empty>
Rule 89    seen_while_LPAR -> <empty>
Rule 90    seen_while_exp -> <empty>
Rule 91    seen_loop_block -> <empty>
Rule 92    if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2
Rule 93    seen_condition -> <empty>
Rule 94    seen_condition_block -> <empty>
Rule 95    if_statement2 -> ELSE block_statement
Rule 96    if_statement2 -> empty
Rule 97    block_statement -> LBRACKET block_statement2 RBRACKET
Rule 98    block_statement2 -> statement block_statement2
Rule 99    block_statement2 -> empty
Rule 100   read_statement -> SCAN ( ID ) SEMICOLON
Rule 101   print_statement -> PRINT ( superexpression ) SEMICOLON
Rule 102   geometry_statement -> move
Rule 103   geometry_statement -> rotate
Rule 104   geometry_statement -> arc
Rule 105   geometry_statement -> home
Rule 106   geometry_statement -> pdown
Rule 107   geometry_statement -> pup
Rule 108   geometry_statement -> setp
Rule 109   geometry_statement -> pcolor
Rule 110   geometry_statement -> psize
Rule 111   geometry_statement -> pclear
Rule 112   move -> MOVE ( superexpression )
Rule 113   rotate -> ROTATE ( superexpression )
Rule 114   arc -> ARC ( superexpression COMMA superexpression )
Rule 115   home -> HOME ( )
Rule 116   pdown -> PDOWN ( )
Rule 117   pup -> PUP ( )
Rule 118   setp -> SETP ( superexpression COMMA superexpression )
Rule 119   pcolor -> PCOLOR ( superexpression COMMA superexpression COMMA superexpression )
Rule 120   psize -> PSIZE ( superexpression )
Rule 121   pclear -> PCLEAR ( )
Rule 122   statement -> variable_declaration
Rule 123   statement -> variable_assignment SEMICOLON
Rule 124   statement -> superexpression SEMICOLON
Rule 125   statement -> if_statement
Rule 126   statement -> loop_statement
Rule 127   statement -> return
Rule 128   statement -> print_statement
Rule 129   statement -> read_statement
Rule 130   statement -> geometry_statement SEMICOLON
Rule 131   return -> RETURN superexpression SEMICOLON
Rule 132   empty -> <empty>

Terminals, with rules where they appear

(                    : 17 27 62 75 84 85 92 100 101 112 113 114 115 116 117 118 119 120 121
)                    : 21 27 62 75 84 85 92 100 101 112 113 114 115 116 117 118 119 120 121
*                    : 59
+                    : 54
-                    : 55
/                    : 60
=                    : 15 33 34
AND                  : 38
ARC                  : 114
CEQ                  : 43
CGE                  : 45
CGT                  : 44
CHEESE               : 27
CLE                  : 47
CLT                  : 46
CNE                  : 48
COMMA                : 9 24 81 114 118 119 119
CSTDOUBLE            : 65
CSTINT               : 13 66
CSTSTRING            : 67
DOUBLE               : 29
ELSE                 : 95
FOR                  : 84
FUNC                 : 17
HOME                 : 115
ID                   : 11 17 26 32 68 100
IF                   : 92
INT                  : 28
LBRACKET             : 97
LSQUARE              : 13 34 70
MAIN                 : 27
MOVE                 : 112
OR                   : 39
PCLEAR               : 121
PCOLOR               : 119
PDOWN                : 116
PRINT                : 101
PSIZE                : 120
PUP                  : 117
RBRACKET             : 97
RETURN               : 131
ROTATE               : 113
RSQUARE              : 13 34 70
SCAN                 : 100
SEMICOLON            : 10 84 84 100 101 123 124 130 131
SETP                 : 118
STRING               : 30
VOID                 : 31
WHILE                : 85
error                : 

Nonterminals, with rules where they appear

andor                : 36
arc                  : 104
arg                  : 77 81
args                 : 75
arithOp              : 52
block_statement      : 21 27 83 92 95
block_statement2     : 97 98
compare              : 40
compare_symbols      : 41
cst_expression       : 61
cst_expression2      : 68
empty                : 4 6 14 16 20 25 37 42 53 58 72 78 82 96 99
expression           : 35
factor               : 56
function_call        : 71
geomOp               : 57
geometry_statement   : 130
home                 : 105
id_or_array          : 32
if_statement         : 125
if_statement2        : 92
loop_statement       : 126
loophead             : 83
main_ahead           : 1
main_method          : 1
method_declaration   : 5
method_declaration2  : 17
method_declaration3  : 17
more_args            : 79
move                 : 102
numeric_expression   : 40 41 52 79
numeric_expression2  : 50
parameter            : 23
parameter_list       : 19 24
parameter_list2      : 23
pclear               : 111
pcolor               : 109
pdown                : 106
print_statement      : 128
program              : 0
program2             : 1 3
program3             : 1 5
psize                : 110
pup                  : 107
read_statement       : 129
return               : 127
rotate               : 103
seen_LSQUARE         : 34 70
seen_RSQUARE         : 34 70
seen_arg             : 79
seen_assignment1     : 84
seen_assignment2     : 84
seen_comp            : 41
seen_condition       : 92
seen_condition_block : 92
seen_for_exp         : 84
seen_func_id         : 75
seen_function_id     : 17
seen_id              : 11
seen_id_or_func      : 68
seen_loop_block      : 83
seen_lpar            : 62
seen_method_start    : 21
seen_rpar            : 62
seen_term            : 50
seen_while_LPAR      : 85
seen_while_exp       : 85
setp                 : 108
statement            : 98
superexpression      : 15 33 34 34 36 62 70 84 85 92 101 112 113 114 114 118 118 119 119 119 120 124 131
superexpression2     : 35
term                 : 50 57
term2                : 56
type                 : 7 17 26
variable_assignment  : 84 84 123
variable_declaration : 3 122
variable_declaration2 : 7 9
variable_declaration3 : 8
variable_declarator  : 8
variable_declarator2 : 11
variable_declarator3 : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program2 program3 main_ahead main_method
    (3) program2 -> . variable_declaration program2
    (4) program2 -> . empty
    (7) variable_declaration -> . type variable_declaration2
    (132) empty -> .
    (28) type -> . INT
    (29) type -> . DOUBLE
    (30) type -> . STRING
    (31) type -> . VOID

    FUNC            reduce using rule 132 (empty -> .)
    MAIN            reduce using rule 132 (empty -> .)
    INT             shift and go to state 6
    DOUBLE          shift and go to state 4
    STRING          shift and go to state 9
    VOID            shift and go to state 7

    variable_declaration           shift and go to state 5
    empty                          shift and go to state 1
    type                           shift and go to state 2
    program2                       shift and go to state 3
    program                        shift and go to state 8

state 1

    (4) program2 -> empty .

    FUNC            reduce using rule 4 (program2 -> empty .)
    MAIN            reduce using rule 4 (program2 -> empty .)


state 2

    (7) variable_declaration -> type . variable_declaration2
    (8) variable_declaration2 -> . variable_declarator variable_declaration3
    (11) variable_declarator -> . ID seen_id variable_declarator2 variable_declarator3

    ID              shift and go to state 12

    variable_declarator            shift and go to state 10
    variable_declaration2          shift and go to state 11

state 3

    (1) program -> program2 . program3 main_ahead main_method
    (5) program3 -> . method_declaration program3
    (6) program3 -> . empty
    (17) method_declaration -> . FUNC type ID seen_function_id ( method_declaration2 method_declaration3
    (132) empty -> .

    FUNC            shift and go to state 14
    MAIN            reduce using rule 132 (empty -> .)

    empty                          shift and go to state 13
    method_declaration             shift and go to state 16
    program3                       shift and go to state 15

state 4

    (29) type -> DOUBLE .

    ID              reduce using rule 29 (type -> DOUBLE .)


state 5

    (3) program2 -> variable_declaration . program2
    (3) program2 -> . variable_declaration program2
    (4) program2 -> . empty
    (7) variable_declaration -> . type variable_declaration2
    (132) empty -> .
    (28) type -> . INT
    (29) type -> . DOUBLE
    (30) type -> . STRING
    (31) type -> . VOID

    FUNC            reduce using rule 132 (empty -> .)
    MAIN            reduce using rule 132 (empty -> .)
    INT             shift and go to state 6
    DOUBLE          shift and go to state 4
    STRING          shift and go to state 9
    VOID            shift and go to state 7

    empty                          shift and go to state 1
    type                           shift and go to state 2
    variable_declaration           shift and go to state 5
    program2                       shift and go to state 17

state 6

    (28) type -> INT .

    ID              reduce using rule 28 (type -> INT .)


state 7

    (31) type -> VOID .

    ID              reduce using rule 31 (type -> VOID .)


state 8

    (0) S' -> program .



state 9

    (30) type -> STRING .

    ID              reduce using rule 30 (type -> STRING .)


state 10

    (8) variable_declaration2 -> variable_declarator . variable_declaration3
    (9) variable_declaration3 -> . COMMA variable_declaration2
    (10) variable_declaration3 -> . SEMICOLON

    COMMA           shift and go to state 20
    SEMICOLON       shift and go to state 19

    variable_declaration3          shift and go to state 18

state 11

    (7) variable_declaration -> type variable_declaration2 .

    INT             reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    DOUBLE          reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    STRING          reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    VOID            reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    FUNC            reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    MAIN            reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    ID              reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    IF              reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    RETURN          reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    PRINT           reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    SCAN            reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    FOR             reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    WHILE           reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    MOVE            reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    ROTATE          reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    ARC             reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    HOME            reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    PDOWN           reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    PUP             reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    SETP            reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    PCOLOR          reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    PSIZE           reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    PCLEAR          reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    (               reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    CSTDOUBLE       reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    CSTINT          reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    CSTSTRING       reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    RBRACKET        reduce using rule 7 (variable_declaration -> type variable_declaration2 .)


state 12

    (11) variable_declarator -> ID . seen_id variable_declarator2 variable_declarator3
    (12) seen_id -> .

    LSQUARE         reduce using rule 12 (seen_id -> .)
    =               reduce using rule 12 (seen_id -> .)
    COMMA           reduce using rule 12 (seen_id -> .)
    SEMICOLON       reduce using rule 12 (seen_id -> .)

    seen_id                        shift and go to state 21

state 13

    (6) program3 -> empty .

    MAIN            reduce using rule 6 (program3 -> empty .)


state 14

    (17) method_declaration -> FUNC . type ID seen_function_id ( method_declaration2 method_declaration3
    (28) type -> . INT
    (29) type -> . DOUBLE
    (30) type -> . STRING
    (31) type -> . VOID

    INT             shift and go to state 6
    DOUBLE          shift and go to state 4
    STRING          shift and go to state 9
    VOID            shift and go to state 7

    type                           shift and go to state 22

state 15

    (1) program -> program2 program3 . main_ahead main_method
    (2) main_ahead -> .

    MAIN            reduce using rule 2 (main_ahead -> .)

    main_ahead                     shift and go to state 23

state 16

    (5) program3 -> method_declaration . program3
    (5) program3 -> . method_declaration program3
    (6) program3 -> . empty
    (17) method_declaration -> . FUNC type ID seen_function_id ( method_declaration2 method_declaration3
    (132) empty -> .

    FUNC            shift and go to state 14
    MAIN            reduce using rule 132 (empty -> .)

    empty                          shift and go to state 13
    method_declaration             shift and go to state 16
    program3                       shift and go to state 24

state 17

    (3) program2 -> variable_declaration program2 .

    FUNC            reduce using rule 3 (program2 -> variable_declaration program2 .)
    MAIN            reduce using rule 3 (program2 -> variable_declaration program2 .)


state 18

    (8) variable_declaration2 -> variable_declarator variable_declaration3 .

    INT             reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    DOUBLE          reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    STRING          reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    VOID            reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    FUNC            reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    MAIN            reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    ID              reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    IF              reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    RETURN          reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    PRINT           reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    SCAN            reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    FOR             reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    WHILE           reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    MOVE            reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    ROTATE          reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    ARC             reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    HOME            reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    PDOWN           reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    PUP             reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    SETP            reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    PCOLOR          reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    PSIZE           reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    PCLEAR          reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    (               reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    CSTDOUBLE       reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    CSTINT          reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    CSTSTRING       reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    RBRACKET        reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)


state 19

    (10) variable_declaration3 -> SEMICOLON .

    INT             reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    DOUBLE          reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    STRING          reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    VOID            reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    FUNC            reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    MAIN            reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    ID              reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    IF              reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    RETURN          reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    PRINT           reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    SCAN            reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    FOR             reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    WHILE           reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    MOVE            reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    ROTATE          reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    ARC             reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    HOME            reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    PDOWN           reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    PUP             reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    SETP            reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    PCOLOR          reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    PSIZE           reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    PCLEAR          reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    (               reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    CSTDOUBLE       reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    CSTINT          reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    CSTSTRING       reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    RBRACKET        reduce using rule 10 (variable_declaration3 -> SEMICOLON .)


state 20

    (9) variable_declaration3 -> COMMA . variable_declaration2
    (8) variable_declaration2 -> . variable_declarator variable_declaration3
    (11) variable_declarator -> . ID seen_id variable_declarator2 variable_declarator3

    ID              shift and go to state 12

    variable_declarator            shift and go to state 10
    variable_declaration2          shift and go to state 25

state 21

    (11) variable_declarator -> ID seen_id . variable_declarator2 variable_declarator3
    (13) variable_declarator2 -> . LSQUARE CSTINT RSQUARE
    (14) variable_declarator2 -> . empty
    (132) empty -> .

    LSQUARE         shift and go to state 28
    =               reduce using rule 132 (empty -> .)
    COMMA           reduce using rule 132 (empty -> .)
    SEMICOLON       reduce using rule 132 (empty -> .)

    empty                          shift and go to state 26
    variable_declarator2           shift and go to state 27

state 22

    (17) method_declaration -> FUNC type . ID seen_function_id ( method_declaration2 method_declaration3

    ID              shift and go to state 29


state 23

    (1) program -> program2 program3 main_ahead . main_method
    (27) main_method -> . MAIN CHEESE ( ) block_statement

    MAIN            shift and go to state 30

    main_method                    shift and go to state 31

state 24

    (5) program3 -> method_declaration program3 .

    MAIN            reduce using rule 5 (program3 -> method_declaration program3 .)


state 25

    (9) variable_declaration3 -> COMMA variable_declaration2 .

    INT             reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    DOUBLE          reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    STRING          reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    VOID            reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    FUNC            reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    MAIN            reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    ID              reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    IF              reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    RETURN          reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    PRINT           reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    SCAN            reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    FOR             reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    WHILE           reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    MOVE            reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    ROTATE          reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    ARC             reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    HOME            reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    PDOWN           reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    PUP             reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    SETP            reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    PCOLOR          reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    PSIZE           reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    PCLEAR          reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    (               reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    CSTDOUBLE       reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    CSTINT          reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    CSTSTRING       reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    RBRACKET        reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)


state 26

    (14) variable_declarator2 -> empty .

    =               reduce using rule 14 (variable_declarator2 -> empty .)
    COMMA           reduce using rule 14 (variable_declarator2 -> empty .)
    SEMICOLON       reduce using rule 14 (variable_declarator2 -> empty .)


state 27

    (11) variable_declarator -> ID seen_id variable_declarator2 . variable_declarator3
    (15) variable_declarator3 -> . = superexpression
    (16) variable_declarator3 -> . empty
    (132) empty -> .

    =               shift and go to state 34
    COMMA           reduce using rule 132 (empty -> .)
    SEMICOLON       reduce using rule 132 (empty -> .)

    empty                          shift and go to state 32
    variable_declarator3           shift and go to state 33

state 28

    (13) variable_declarator2 -> LSQUARE . CSTINT RSQUARE

    CSTINT          shift and go to state 35


state 29

    (17) method_declaration -> FUNC type ID . seen_function_id ( method_declaration2 method_declaration3
    (18) seen_function_id -> .

    (               reduce using rule 18 (seen_function_id -> .)

    seen_function_id               shift and go to state 36

state 30

    (27) main_method -> MAIN . CHEESE ( ) block_statement

    CHEESE          shift and go to state 37


state 31

    (1) program -> program2 program3 main_ahead main_method .

    $end            reduce using rule 1 (program -> program2 program3 main_ahead main_method .)


state 32

    (16) variable_declarator3 -> empty .

    COMMA           reduce using rule 16 (variable_declarator3 -> empty .)
    SEMICOLON       reduce using rule 16 (variable_declarator3 -> empty .)


state 33

    (11) variable_declarator -> ID seen_id variable_declarator2 variable_declarator3 .

    COMMA           reduce using rule 11 (variable_declarator -> ID seen_id variable_declarator2 variable_declarator3 .)
    SEMICOLON       reduce using rule 11 (variable_declarator -> ID seen_id variable_declarator2 variable_declarator3 .)


state 34

    (15) variable_declarator3 -> = . superexpression
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 45
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 35

    (13) variable_declarator2 -> LSQUARE CSTINT . RSQUARE

    RSQUARE         shift and go to state 49


state 36

    (17) method_declaration -> FUNC type ID seen_function_id . ( method_declaration2 method_declaration3

    (               shift and go to state 50


state 37

    (27) main_method -> MAIN CHEESE . ( ) block_statement

    (               shift and go to state 51


state 38

    (61) factor -> cst_expression .

    *               reduce using rule 61 (factor -> cst_expression .)
    /               reduce using rule 61 (factor -> cst_expression .)
    +               reduce using rule 61 (factor -> cst_expression .)
    -               reduce using rule 61 (factor -> cst_expression .)
    CEQ             reduce using rule 61 (factor -> cst_expression .)
    CGT             reduce using rule 61 (factor -> cst_expression .)
    CGE             reduce using rule 61 (factor -> cst_expression .)
    CLT             reduce using rule 61 (factor -> cst_expression .)
    CLE             reduce using rule 61 (factor -> cst_expression .)
    CNE             reduce using rule 61 (factor -> cst_expression .)
    AND             reduce using rule 61 (factor -> cst_expression .)
    OR              reduce using rule 61 (factor -> cst_expression .)
    COMMA           reduce using rule 61 (factor -> cst_expression .)
    RSQUARE         reduce using rule 61 (factor -> cst_expression .)
    SEMICOLON       reduce using rule 61 (factor -> cst_expression .)
    )               reduce using rule 61 (factor -> cst_expression .)


state 39

    (62) factor -> ( . seen_lpar superexpression ) seen_rpar
    (63) seen_lpar -> .

    (               reduce using rule 63 (seen_lpar -> .)
    CSTDOUBLE       reduce using rule 63 (seen_lpar -> .)
    CSTINT          reduce using rule 63 (seen_lpar -> .)
    CSTSTRING       reduce using rule 63 (seen_lpar -> .)
    ID              reduce using rule 63 (seen_lpar -> .)

    seen_lpar                      shift and go to state 52

state 40

    (68) cst_expression -> ID . seen_id_or_func cst_expression2
    (69) seen_id_or_func -> .

    LSQUARE         reduce using rule 69 (seen_id_or_func -> .)
    (               reduce using rule 69 (seen_id_or_func -> .)
    *               reduce using rule 69 (seen_id_or_func -> .)
    /               reduce using rule 69 (seen_id_or_func -> .)
    +               reduce using rule 69 (seen_id_or_func -> .)
    -               reduce using rule 69 (seen_id_or_func -> .)
    CEQ             reduce using rule 69 (seen_id_or_func -> .)
    CGT             reduce using rule 69 (seen_id_or_func -> .)
    CGE             reduce using rule 69 (seen_id_or_func -> .)
    CLT             reduce using rule 69 (seen_id_or_func -> .)
    CLE             reduce using rule 69 (seen_id_or_func -> .)
    CNE             reduce using rule 69 (seen_id_or_func -> .)
    AND             reduce using rule 69 (seen_id_or_func -> .)
    OR              reduce using rule 69 (seen_id_or_func -> .)
    COMMA           reduce using rule 69 (seen_id_or_func -> .)
    SEMICOLON       reduce using rule 69 (seen_id_or_func -> .)
    )               reduce using rule 69 (seen_id_or_func -> .)
    RSQUARE         reduce using rule 69 (seen_id_or_func -> .)

    seen_id_or_func                shift and go to state 53

state 41

    (67) cst_expression -> CSTSTRING .

    *               reduce using rule 67 (cst_expression -> CSTSTRING .)
    /               reduce using rule 67 (cst_expression -> CSTSTRING .)
    +               reduce using rule 67 (cst_expression -> CSTSTRING .)
    -               reduce using rule 67 (cst_expression -> CSTSTRING .)
    COMMA           reduce using rule 67 (cst_expression -> CSTSTRING .)
    )               reduce using rule 67 (cst_expression -> CSTSTRING .)
    CEQ             reduce using rule 67 (cst_expression -> CSTSTRING .)
    CGT             reduce using rule 67 (cst_expression -> CSTSTRING .)
    CGE             reduce using rule 67 (cst_expression -> CSTSTRING .)
    CLT             reduce using rule 67 (cst_expression -> CSTSTRING .)
    CLE             reduce using rule 67 (cst_expression -> CSTSTRING .)
    CNE             reduce using rule 67 (cst_expression -> CSTSTRING .)
    AND             reduce using rule 67 (cst_expression -> CSTSTRING .)
    OR              reduce using rule 67 (cst_expression -> CSTSTRING .)
    SEMICOLON       reduce using rule 67 (cst_expression -> CSTSTRING .)
    RSQUARE         reduce using rule 67 (cst_expression -> CSTSTRING .)


state 42

    (35) superexpression -> expression . superexpression2
    (36) superexpression2 -> . andor superexpression
    (37) superexpression2 -> . empty
    (38) andor -> . AND
    (39) andor -> . OR
    (132) empty -> .

    AND             shift and go to state 57
    OR              shift and go to state 55
    COMMA           reduce using rule 132 (empty -> .)
    SEMICOLON       reduce using rule 132 (empty -> .)
    )               reduce using rule 132 (empty -> .)
    RSQUARE         reduce using rule 132 (empty -> .)

    empty                          shift and go to state 54
    superexpression2               shift and go to state 58
    andor                          shift and go to state 56

state 43

    (66) cst_expression -> CSTINT .

    *               reduce using rule 66 (cst_expression -> CSTINT .)
    /               reduce using rule 66 (cst_expression -> CSTINT .)
    +               reduce using rule 66 (cst_expression -> CSTINT .)
    -               reduce using rule 66 (cst_expression -> CSTINT .)
    COMMA           reduce using rule 66 (cst_expression -> CSTINT .)
    )               reduce using rule 66 (cst_expression -> CSTINT .)
    CEQ             reduce using rule 66 (cst_expression -> CSTINT .)
    CGT             reduce using rule 66 (cst_expression -> CSTINT .)
    CGE             reduce using rule 66 (cst_expression -> CSTINT .)
    CLT             reduce using rule 66 (cst_expression -> CSTINT .)
    CLE             reduce using rule 66 (cst_expression -> CSTINT .)
    CNE             reduce using rule 66 (cst_expression -> CSTINT .)
    AND             reduce using rule 66 (cst_expression -> CSTINT .)
    OR              reduce using rule 66 (cst_expression -> CSTINT .)
    SEMICOLON       reduce using rule 66 (cst_expression -> CSTINT .)
    RSQUARE         reduce using rule 66 (cst_expression -> CSTINT .)


state 44

    (40) expression -> numeric_expression . compare
    (41) compare -> . compare_symbols numeric_expression seen_comp
    (42) compare -> . empty
    (43) compare_symbols -> . CEQ
    (44) compare_symbols -> . CGT
    (45) compare_symbols -> . CGE
    (46) compare_symbols -> . CLT
    (47) compare_symbols -> . CLE
    (48) compare_symbols -> . CNE
    (132) empty -> .

    CEQ             shift and go to state 65
    CGT             shift and go to state 63
    CGE             shift and go to state 64
    CLT             shift and go to state 66
    CLE             shift and go to state 62
    CNE             shift and go to state 61
    AND             reduce using rule 132 (empty -> .)
    OR              reduce using rule 132 (empty -> .)
    COMMA           reduce using rule 132 (empty -> .)
    SEMICOLON       reduce using rule 132 (empty -> .)
    )               reduce using rule 132 (empty -> .)
    RSQUARE         reduce using rule 132 (empty -> .)

    empty                          shift and go to state 59
    compare                        shift and go to state 60
    compare_symbols                shift and go to state 67

state 45

    (15) variable_declarator3 -> = superexpression .

    COMMA           reduce using rule 15 (variable_declarator3 -> = superexpression .)
    SEMICOLON       reduce using rule 15 (variable_declarator3 -> = superexpression .)


state 46

    (56) term -> factor . term2
    (57) term2 -> . geomOp term
    (58) term2 -> . empty
    (59) geomOp -> . *
    (60) geomOp -> . /
    (132) empty -> .

    *               shift and go to state 69
    /               shift and go to state 71
    +               reduce using rule 132 (empty -> .)
    -               reduce using rule 132 (empty -> .)
    CEQ             reduce using rule 132 (empty -> .)
    CGT             reduce using rule 132 (empty -> .)
    CGE             reduce using rule 132 (empty -> .)
    CLT             reduce using rule 132 (empty -> .)
    CLE             reduce using rule 132 (empty -> .)
    CNE             reduce using rule 132 (empty -> .)
    AND             reduce using rule 132 (empty -> .)
    OR              reduce using rule 132 (empty -> .)
    COMMA           reduce using rule 132 (empty -> .)
    SEMICOLON       reduce using rule 132 (empty -> .)
    )               reduce using rule 132 (empty -> .)
    RSQUARE         reduce using rule 132 (empty -> .)

    empty                          shift and go to state 68
    geomOp                         shift and go to state 70
    term2                          shift and go to state 72

state 47

    (65) cst_expression -> CSTDOUBLE .

    *               reduce using rule 65 (cst_expression -> CSTDOUBLE .)
    /               reduce using rule 65 (cst_expression -> CSTDOUBLE .)
    +               reduce using rule 65 (cst_expression -> CSTDOUBLE .)
    -               reduce using rule 65 (cst_expression -> CSTDOUBLE .)
    COMMA           reduce using rule 65 (cst_expression -> CSTDOUBLE .)
    )               reduce using rule 65 (cst_expression -> CSTDOUBLE .)
    CEQ             reduce using rule 65 (cst_expression -> CSTDOUBLE .)
    CGT             reduce using rule 65 (cst_expression -> CSTDOUBLE .)
    CGE             reduce using rule 65 (cst_expression -> CSTDOUBLE .)
    CLT             reduce using rule 65 (cst_expression -> CSTDOUBLE .)
    CLE             reduce using rule 65 (cst_expression -> CSTDOUBLE .)
    CNE             reduce using rule 65 (cst_expression -> CSTDOUBLE .)
    AND             reduce using rule 65 (cst_expression -> CSTDOUBLE .)
    OR              reduce using rule 65 (cst_expression -> CSTDOUBLE .)
    SEMICOLON       reduce using rule 65 (cst_expression -> CSTDOUBLE .)
    RSQUARE         reduce using rule 65 (cst_expression -> CSTDOUBLE .)


state 48

    (50) numeric_expression -> term . seen_term numeric_expression2
    (51) seen_term -> .

    +               reduce using rule 51 (seen_term -> .)
    -               reduce using rule 51 (seen_term -> .)
    CEQ             reduce using rule 51 (seen_term -> .)
    CGT             reduce using rule 51 (seen_term -> .)
    CGE             reduce using rule 51 (seen_term -> .)
    CLT             reduce using rule 51 (seen_term -> .)
    CLE             reduce using rule 51 (seen_term -> .)
    CNE             reduce using rule 51 (seen_term -> .)
    AND             reduce using rule 51 (seen_term -> .)
    OR              reduce using rule 51 (seen_term -> .)
    COMMA           reduce using rule 51 (seen_term -> .)
    SEMICOLON       reduce using rule 51 (seen_term -> .)
    )               reduce using rule 51 (seen_term -> .)
    RSQUARE         reduce using rule 51 (seen_term -> .)

    seen_term                      shift and go to state 73

state 49

    (13) variable_declarator2 -> LSQUARE CSTINT RSQUARE .

    =               reduce using rule 13 (variable_declarator2 -> LSQUARE CSTINT RSQUARE .)
    COMMA           reduce using rule 13 (variable_declarator2 -> LSQUARE CSTINT RSQUARE .)
    SEMICOLON       reduce using rule 13 (variable_declarator2 -> LSQUARE CSTINT RSQUARE .)


state 50

    (17) method_declaration -> FUNC type ID seen_function_id ( . method_declaration2 method_declaration3
    (19) method_declaration2 -> . parameter_list
    (20) method_declaration2 -> . empty
    (23) parameter_list -> . parameter parameter_list2
    (132) empty -> .
    (26) parameter -> . type ID
    (28) type -> . INT
    (29) type -> . DOUBLE
    (30) type -> . STRING
    (31) type -> . VOID

    )               reduce using rule 132 (empty -> .)
    INT             shift and go to state 6
    DOUBLE          shift and go to state 4
    STRING          shift and go to state 9
    VOID            shift and go to state 7

    parameter_list                 shift and go to state 74
    type                           shift and go to state 76
    parameter                      shift and go to state 75
    method_declaration2            shift and go to state 78
    empty                          shift and go to state 77

state 51

    (27) main_method -> MAIN CHEESE ( . ) block_statement

    )               shift and go to state 79


state 52

    (62) factor -> ( seen_lpar . superexpression ) seen_rpar
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 80
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 53

    (68) cst_expression -> ID seen_id_or_func . cst_expression2
    (70) cst_expression2 -> . LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE
    (71) cst_expression2 -> . function_call
    (72) cst_expression2 -> . empty
    (75) function_call -> . seen_func_id ( args )
    (132) empty -> .
    (76) seen_func_id -> .

    LSQUARE         shift and go to state 82
    *               reduce using rule 132 (empty -> .)
    /               reduce using rule 132 (empty -> .)
    +               reduce using rule 132 (empty -> .)
    -               reduce using rule 132 (empty -> .)
    CEQ             reduce using rule 132 (empty -> .)
    CGT             reduce using rule 132 (empty -> .)
    CGE             reduce using rule 132 (empty -> .)
    CLT             reduce using rule 132 (empty -> .)
    CLE             reduce using rule 132 (empty -> .)
    CNE             reduce using rule 132 (empty -> .)
    AND             reduce using rule 132 (empty -> .)
    OR              reduce using rule 132 (empty -> .)
    COMMA           reduce using rule 132 (empty -> .)
    SEMICOLON       reduce using rule 132 (empty -> .)
    )               reduce using rule 132 (empty -> .)
    RSQUARE         reduce using rule 132 (empty -> .)
    (               reduce using rule 76 (seen_func_id -> .)

    empty                          shift and go to state 81
    function_call                  shift and go to state 84
    seen_func_id                   shift and go to state 83
    cst_expression2                shift and go to state 85

state 54

    (37) superexpression2 -> empty .

    COMMA           reduce using rule 37 (superexpression2 -> empty .)
    SEMICOLON       reduce using rule 37 (superexpression2 -> empty .)
    )               reduce using rule 37 (superexpression2 -> empty .)
    RSQUARE         reduce using rule 37 (superexpression2 -> empty .)


state 55

    (39) andor -> OR .

    (               reduce using rule 39 (andor -> OR .)
    CSTDOUBLE       reduce using rule 39 (andor -> OR .)
    CSTINT          reduce using rule 39 (andor -> OR .)
    CSTSTRING       reduce using rule 39 (andor -> OR .)
    ID              reduce using rule 39 (andor -> OR .)


state 56

    (36) superexpression2 -> andor . superexpression
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 86
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 57

    (38) andor -> AND .

    (               reduce using rule 38 (andor -> AND .)
    CSTDOUBLE       reduce using rule 38 (andor -> AND .)
    CSTINT          reduce using rule 38 (andor -> AND .)
    CSTSTRING       reduce using rule 38 (andor -> AND .)
    ID              reduce using rule 38 (andor -> AND .)


state 58

    (35) superexpression -> expression superexpression2 .

    COMMA           reduce using rule 35 (superexpression -> expression superexpression2 .)
    )               reduce using rule 35 (superexpression -> expression superexpression2 .)
    RSQUARE         reduce using rule 35 (superexpression -> expression superexpression2 .)
    SEMICOLON       reduce using rule 35 (superexpression -> expression superexpression2 .)


state 59

    (42) compare -> empty .

    AND             reduce using rule 42 (compare -> empty .)
    OR              reduce using rule 42 (compare -> empty .)
    COMMA           reduce using rule 42 (compare -> empty .)
    SEMICOLON       reduce using rule 42 (compare -> empty .)
    )               reduce using rule 42 (compare -> empty .)
    RSQUARE         reduce using rule 42 (compare -> empty .)


state 60

    (40) expression -> numeric_expression compare .

    AND             reduce using rule 40 (expression -> numeric_expression compare .)
    OR              reduce using rule 40 (expression -> numeric_expression compare .)
    )               reduce using rule 40 (expression -> numeric_expression compare .)
    RSQUARE         reduce using rule 40 (expression -> numeric_expression compare .)
    SEMICOLON       reduce using rule 40 (expression -> numeric_expression compare .)
    COMMA           reduce using rule 40 (expression -> numeric_expression compare .)


state 61

    (48) compare_symbols -> CNE .

    (               reduce using rule 48 (compare_symbols -> CNE .)
    CSTDOUBLE       reduce using rule 48 (compare_symbols -> CNE .)
    CSTINT          reduce using rule 48 (compare_symbols -> CNE .)
    CSTSTRING       reduce using rule 48 (compare_symbols -> CNE .)
    ID              reduce using rule 48 (compare_symbols -> CNE .)


state 62

    (47) compare_symbols -> CLE .

    (               reduce using rule 47 (compare_symbols -> CLE .)
    CSTDOUBLE       reduce using rule 47 (compare_symbols -> CLE .)
    CSTINT          reduce using rule 47 (compare_symbols -> CLE .)
    CSTSTRING       reduce using rule 47 (compare_symbols -> CLE .)
    ID              reduce using rule 47 (compare_symbols -> CLE .)


state 63

    (44) compare_symbols -> CGT .

    (               reduce using rule 44 (compare_symbols -> CGT .)
    CSTDOUBLE       reduce using rule 44 (compare_symbols -> CGT .)
    CSTINT          reduce using rule 44 (compare_symbols -> CGT .)
    CSTSTRING       reduce using rule 44 (compare_symbols -> CGT .)
    ID              reduce using rule 44 (compare_symbols -> CGT .)


state 64

    (45) compare_symbols -> CGE .

    (               reduce using rule 45 (compare_symbols -> CGE .)
    CSTDOUBLE       reduce using rule 45 (compare_symbols -> CGE .)
    CSTINT          reduce using rule 45 (compare_symbols -> CGE .)
    CSTSTRING       reduce using rule 45 (compare_symbols -> CGE .)
    ID              reduce using rule 45 (compare_symbols -> CGE .)


state 65

    (43) compare_symbols -> CEQ .

    (               reduce using rule 43 (compare_symbols -> CEQ .)
    CSTDOUBLE       reduce using rule 43 (compare_symbols -> CEQ .)
    CSTINT          reduce using rule 43 (compare_symbols -> CEQ .)
    CSTSTRING       reduce using rule 43 (compare_symbols -> CEQ .)
    ID              reduce using rule 43 (compare_symbols -> CEQ .)


state 66

    (46) compare_symbols -> CLT .

    (               reduce using rule 46 (compare_symbols -> CLT .)
    CSTDOUBLE       reduce using rule 46 (compare_symbols -> CLT .)
    CSTINT          reduce using rule 46 (compare_symbols -> CLT .)
    CSTSTRING       reduce using rule 46 (compare_symbols -> CLT .)
    ID              reduce using rule 46 (compare_symbols -> CLT .)


state 67

    (41) compare -> compare_symbols . numeric_expression seen_comp
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 87
    term                           shift and go to state 48
    factor                         shift and go to state 46

state 68

    (58) term2 -> empty .

    +               reduce using rule 58 (term2 -> empty .)
    -               reduce using rule 58 (term2 -> empty .)
    CEQ             reduce using rule 58 (term2 -> empty .)
    CGT             reduce using rule 58 (term2 -> empty .)
    CGE             reduce using rule 58 (term2 -> empty .)
    CLT             reduce using rule 58 (term2 -> empty .)
    CLE             reduce using rule 58 (term2 -> empty .)
    CNE             reduce using rule 58 (term2 -> empty .)
    AND             reduce using rule 58 (term2 -> empty .)
    OR              reduce using rule 58 (term2 -> empty .)
    COMMA           reduce using rule 58 (term2 -> empty .)
    SEMICOLON       reduce using rule 58 (term2 -> empty .)
    )               reduce using rule 58 (term2 -> empty .)
    RSQUARE         reduce using rule 58 (term2 -> empty .)


state 69

    (59) geomOp -> * .

    (               reduce using rule 59 (geomOp -> * .)
    CSTDOUBLE       reduce using rule 59 (geomOp -> * .)
    CSTINT          reduce using rule 59 (geomOp -> * .)
    CSTSTRING       reduce using rule 59 (geomOp -> * .)
    ID              reduce using rule 59 (geomOp -> * .)


state 70

    (57) term2 -> geomOp . term
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    term                           shift and go to state 88
    cst_expression                 shift and go to state 38
    factor                         shift and go to state 46

state 71

    (60) geomOp -> / .

    (               reduce using rule 60 (geomOp -> / .)
    CSTDOUBLE       reduce using rule 60 (geomOp -> / .)
    CSTINT          reduce using rule 60 (geomOp -> / .)
    CSTSTRING       reduce using rule 60 (geomOp -> / .)
    ID              reduce using rule 60 (geomOp -> / .)


state 72

    (56) term -> factor term2 .

    +               reduce using rule 56 (term -> factor term2 .)
    -               reduce using rule 56 (term -> factor term2 .)
    CEQ             reduce using rule 56 (term -> factor term2 .)
    CGT             reduce using rule 56 (term -> factor term2 .)
    CGE             reduce using rule 56 (term -> factor term2 .)
    CLT             reduce using rule 56 (term -> factor term2 .)
    CLE             reduce using rule 56 (term -> factor term2 .)
    CNE             reduce using rule 56 (term -> factor term2 .)
    AND             reduce using rule 56 (term -> factor term2 .)
    OR              reduce using rule 56 (term -> factor term2 .)
    COMMA           reduce using rule 56 (term -> factor term2 .)
    SEMICOLON       reduce using rule 56 (term -> factor term2 .)
    )               reduce using rule 56 (term -> factor term2 .)
    RSQUARE         reduce using rule 56 (term -> factor term2 .)


state 73

    (50) numeric_expression -> term seen_term . numeric_expression2
    (52) numeric_expression2 -> . arithOp numeric_expression
    (53) numeric_expression2 -> . empty
    (54) arithOp -> . +
    (55) arithOp -> . -
    (132) empty -> .

    +               shift and go to state 93
    -               shift and go to state 90
    CEQ             reduce using rule 132 (empty -> .)
    CGT             reduce using rule 132 (empty -> .)
    CGE             reduce using rule 132 (empty -> .)
    CLT             reduce using rule 132 (empty -> .)
    CLE             reduce using rule 132 (empty -> .)
    CNE             reduce using rule 132 (empty -> .)
    AND             reduce using rule 132 (empty -> .)
    OR              reduce using rule 132 (empty -> .)
    COMMA           reduce using rule 132 (empty -> .)
    SEMICOLON       reduce using rule 132 (empty -> .)
    )               reduce using rule 132 (empty -> .)
    RSQUARE         reduce using rule 132 (empty -> .)

    empty                          shift and go to state 89
    numeric_expression2            shift and go to state 91
    arithOp                        shift and go to state 92

state 74

    (19) method_declaration2 -> parameter_list .

    )               reduce using rule 19 (method_declaration2 -> parameter_list .)


state 75

    (23) parameter_list -> parameter . parameter_list2
    (24) parameter_list2 -> . COMMA parameter_list
    (25) parameter_list2 -> . empty
    (132) empty -> .

    COMMA           shift and go to state 95
    )               reduce using rule 132 (empty -> .)

    empty                          shift and go to state 94
    parameter_list2                shift and go to state 96

state 76

    (26) parameter -> type . ID

    ID              shift and go to state 97


state 77

    (20) method_declaration2 -> empty .

    )               reduce using rule 20 (method_declaration2 -> empty .)


state 78

    (17) method_declaration -> FUNC type ID seen_function_id ( method_declaration2 . method_declaration3
    (21) method_declaration3 -> . ) seen_method_start block_statement

    )               shift and go to state 99

    method_declaration3            shift and go to state 98

state 79

    (27) main_method -> MAIN CHEESE ( ) . block_statement
    (97) block_statement -> . LBRACKET block_statement2 RBRACKET

    LBRACKET        shift and go to state 101

    block_statement                shift and go to state 100

state 80

    (62) factor -> ( seen_lpar superexpression . ) seen_rpar

    )               shift and go to state 102


state 81

    (72) cst_expression2 -> empty .

    *               reduce using rule 72 (cst_expression2 -> empty .)
    /               reduce using rule 72 (cst_expression2 -> empty .)
    +               reduce using rule 72 (cst_expression2 -> empty .)
    -               reduce using rule 72 (cst_expression2 -> empty .)
    CEQ             reduce using rule 72 (cst_expression2 -> empty .)
    CGT             reduce using rule 72 (cst_expression2 -> empty .)
    CGE             reduce using rule 72 (cst_expression2 -> empty .)
    CLT             reduce using rule 72 (cst_expression2 -> empty .)
    CLE             reduce using rule 72 (cst_expression2 -> empty .)
    CNE             reduce using rule 72 (cst_expression2 -> empty .)
    AND             reduce using rule 72 (cst_expression2 -> empty .)
    OR              reduce using rule 72 (cst_expression2 -> empty .)
    COMMA           reduce using rule 72 (cst_expression2 -> empty .)
    SEMICOLON       reduce using rule 72 (cst_expression2 -> empty .)
    )               reduce using rule 72 (cst_expression2 -> empty .)
    RSQUARE         reduce using rule 72 (cst_expression2 -> empty .)


state 82

    (70) cst_expression2 -> LSQUARE . seen_LSQUARE superexpression RSQUARE seen_RSQUARE
    (73) seen_LSQUARE -> .

    (               reduce using rule 73 (seen_LSQUARE -> .)
    CSTDOUBLE       reduce using rule 73 (seen_LSQUARE -> .)
    CSTINT          reduce using rule 73 (seen_LSQUARE -> .)
    CSTSTRING       reduce using rule 73 (seen_LSQUARE -> .)
    ID              reduce using rule 73 (seen_LSQUARE -> .)

    seen_LSQUARE                   shift and go to state 103

state 83

    (75) function_call -> seen_func_id . ( args )

    (               shift and go to state 104


state 84

    (71) cst_expression2 -> function_call .

    *               reduce using rule 71 (cst_expression2 -> function_call .)
    /               reduce using rule 71 (cst_expression2 -> function_call .)
    +               reduce using rule 71 (cst_expression2 -> function_call .)
    -               reduce using rule 71 (cst_expression2 -> function_call .)
    CEQ             reduce using rule 71 (cst_expression2 -> function_call .)
    CGT             reduce using rule 71 (cst_expression2 -> function_call .)
    CGE             reduce using rule 71 (cst_expression2 -> function_call .)
    CLT             reduce using rule 71 (cst_expression2 -> function_call .)
    CLE             reduce using rule 71 (cst_expression2 -> function_call .)
    CNE             reduce using rule 71 (cst_expression2 -> function_call .)
    AND             reduce using rule 71 (cst_expression2 -> function_call .)
    OR              reduce using rule 71 (cst_expression2 -> function_call .)
    COMMA           reduce using rule 71 (cst_expression2 -> function_call .)
    SEMICOLON       reduce using rule 71 (cst_expression2 -> function_call .)
    )               reduce using rule 71 (cst_expression2 -> function_call .)
    RSQUARE         reduce using rule 71 (cst_expression2 -> function_call .)


state 85

    (68) cst_expression -> ID seen_id_or_func cst_expression2 .

    *               reduce using rule 68 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    /               reduce using rule 68 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    +               reduce using rule 68 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    -               reduce using rule 68 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    COMMA           reduce using rule 68 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    )               reduce using rule 68 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    CEQ             reduce using rule 68 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    CGT             reduce using rule 68 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    CGE             reduce using rule 68 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    CLT             reduce using rule 68 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    CLE             reduce using rule 68 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    CNE             reduce using rule 68 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    AND             reduce using rule 68 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    OR              reduce using rule 68 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    SEMICOLON       reduce using rule 68 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    RSQUARE         reduce using rule 68 (cst_expression -> ID seen_id_or_func cst_expression2 .)


state 86

    (36) superexpression2 -> andor superexpression .

    COMMA           reduce using rule 36 (superexpression2 -> andor superexpression .)
    SEMICOLON       reduce using rule 36 (superexpression2 -> andor superexpression .)
    )               reduce using rule 36 (superexpression2 -> andor superexpression .)
    RSQUARE         reduce using rule 36 (superexpression2 -> andor superexpression .)


state 87

    (41) compare -> compare_symbols numeric_expression . seen_comp
    (49) seen_comp -> .

    AND             reduce using rule 49 (seen_comp -> .)
    OR              reduce using rule 49 (seen_comp -> .)
    COMMA           reduce using rule 49 (seen_comp -> .)
    SEMICOLON       reduce using rule 49 (seen_comp -> .)
    )               reduce using rule 49 (seen_comp -> .)
    RSQUARE         reduce using rule 49 (seen_comp -> .)

    seen_comp                      shift and go to state 105

state 88

    (57) term2 -> geomOp term .

    +               reduce using rule 57 (term2 -> geomOp term .)
    -               reduce using rule 57 (term2 -> geomOp term .)
    CEQ             reduce using rule 57 (term2 -> geomOp term .)
    CGT             reduce using rule 57 (term2 -> geomOp term .)
    CGE             reduce using rule 57 (term2 -> geomOp term .)
    CLT             reduce using rule 57 (term2 -> geomOp term .)
    CLE             reduce using rule 57 (term2 -> geomOp term .)
    CNE             reduce using rule 57 (term2 -> geomOp term .)
    AND             reduce using rule 57 (term2 -> geomOp term .)
    OR              reduce using rule 57 (term2 -> geomOp term .)
    COMMA           reduce using rule 57 (term2 -> geomOp term .)
    SEMICOLON       reduce using rule 57 (term2 -> geomOp term .)
    )               reduce using rule 57 (term2 -> geomOp term .)
    RSQUARE         reduce using rule 57 (term2 -> geomOp term .)


state 89

    (53) numeric_expression2 -> empty .

    CEQ             reduce using rule 53 (numeric_expression2 -> empty .)
    CGT             reduce using rule 53 (numeric_expression2 -> empty .)
    CGE             reduce using rule 53 (numeric_expression2 -> empty .)
    CLT             reduce using rule 53 (numeric_expression2 -> empty .)
    CLE             reduce using rule 53 (numeric_expression2 -> empty .)
    CNE             reduce using rule 53 (numeric_expression2 -> empty .)
    AND             reduce using rule 53 (numeric_expression2 -> empty .)
    OR              reduce using rule 53 (numeric_expression2 -> empty .)
    COMMA           reduce using rule 53 (numeric_expression2 -> empty .)
    SEMICOLON       reduce using rule 53 (numeric_expression2 -> empty .)
    )               reduce using rule 53 (numeric_expression2 -> empty .)
    RSQUARE         reduce using rule 53 (numeric_expression2 -> empty .)


state 90

    (55) arithOp -> - .

    (               reduce using rule 55 (arithOp -> - .)
    CSTDOUBLE       reduce using rule 55 (arithOp -> - .)
    CSTINT          reduce using rule 55 (arithOp -> - .)
    CSTSTRING       reduce using rule 55 (arithOp -> - .)
    ID              reduce using rule 55 (arithOp -> - .)


state 91

    (50) numeric_expression -> term seen_term numeric_expression2 .

    CEQ             reduce using rule 50 (numeric_expression -> term seen_term numeric_expression2 .)
    CGT             reduce using rule 50 (numeric_expression -> term seen_term numeric_expression2 .)
    CGE             reduce using rule 50 (numeric_expression -> term seen_term numeric_expression2 .)
    CLT             reduce using rule 50 (numeric_expression -> term seen_term numeric_expression2 .)
    CLE             reduce using rule 50 (numeric_expression -> term seen_term numeric_expression2 .)
    CNE             reduce using rule 50 (numeric_expression -> term seen_term numeric_expression2 .)
    AND             reduce using rule 50 (numeric_expression -> term seen_term numeric_expression2 .)
    OR              reduce using rule 50 (numeric_expression -> term seen_term numeric_expression2 .)
    RSQUARE         reduce using rule 50 (numeric_expression -> term seen_term numeric_expression2 .)
    SEMICOLON       reduce using rule 50 (numeric_expression -> term seen_term numeric_expression2 .)
    )               reduce using rule 50 (numeric_expression -> term seen_term numeric_expression2 .)
    COMMA           reduce using rule 50 (numeric_expression -> term seen_term numeric_expression2 .)


state 92

    (52) numeric_expression2 -> arithOp . numeric_expression
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 106
    factor                         shift and go to state 46
    term                           shift and go to state 48

state 93

    (54) arithOp -> + .

    (               reduce using rule 54 (arithOp -> + .)
    CSTDOUBLE       reduce using rule 54 (arithOp -> + .)
    CSTINT          reduce using rule 54 (arithOp -> + .)
    CSTSTRING       reduce using rule 54 (arithOp -> + .)
    ID              reduce using rule 54 (arithOp -> + .)


state 94

    (25) parameter_list2 -> empty .

    )               reduce using rule 25 (parameter_list2 -> empty .)


state 95

    (24) parameter_list2 -> COMMA . parameter_list
    (23) parameter_list -> . parameter parameter_list2
    (26) parameter -> . type ID
    (28) type -> . INT
    (29) type -> . DOUBLE
    (30) type -> . STRING
    (31) type -> . VOID

    INT             shift and go to state 6
    DOUBLE          shift and go to state 4
    STRING          shift and go to state 9
    VOID            shift and go to state 7

    parameter_list                 shift and go to state 107
    type                           shift and go to state 76
    parameter                      shift and go to state 75

state 96

    (23) parameter_list -> parameter parameter_list2 .

    )               reduce using rule 23 (parameter_list -> parameter parameter_list2 .)


state 97

    (26) parameter -> type ID .

    COMMA           reduce using rule 26 (parameter -> type ID .)
    )               reduce using rule 26 (parameter -> type ID .)


state 98

    (17) method_declaration -> FUNC type ID seen_function_id ( method_declaration2 method_declaration3 .

    FUNC            reduce using rule 17 (method_declaration -> FUNC type ID seen_function_id ( method_declaration2 method_declaration3 .)
    MAIN            reduce using rule 17 (method_declaration -> FUNC type ID seen_function_id ( method_declaration2 method_declaration3 .)


state 99

    (21) method_declaration3 -> ) . seen_method_start block_statement
    (22) seen_method_start -> .

    LBRACKET        reduce using rule 22 (seen_method_start -> .)

    seen_method_start              shift and go to state 108

state 100

    (27) main_method -> MAIN CHEESE ( ) block_statement .

    $end            reduce using rule 27 (main_method -> MAIN CHEESE ( ) block_statement .)


state 101

    (97) block_statement -> LBRACKET . block_statement2 RBRACKET
    (98) block_statement2 -> . statement block_statement2
    (99) block_statement2 -> . empty
    (122) statement -> . variable_declaration
    (123) statement -> . variable_assignment SEMICOLON
    (124) statement -> . superexpression SEMICOLON
    (125) statement -> . if_statement
    (126) statement -> . loop_statement
    (127) statement -> . return
    (128) statement -> . print_statement
    (129) statement -> . read_statement
    (130) statement -> . geometry_statement SEMICOLON
    (132) empty -> .
    (7) variable_declaration -> . type variable_declaration2
    (32) variable_assignment -> . ID id_or_array
    (35) superexpression -> . expression superexpression2
    (92) if_statement -> . IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2
    (83) loop_statement -> . loophead block_statement seen_loop_block
    (131) return -> . RETURN superexpression SEMICOLON
    (101) print_statement -> . PRINT ( superexpression ) SEMICOLON
    (100) read_statement -> . SCAN ( ID ) SEMICOLON
    (102) geometry_statement -> . move
    (103) geometry_statement -> . rotate
    (104) geometry_statement -> . arc
    (105) geometry_statement -> . home
    (106) geometry_statement -> . pdown
    (107) geometry_statement -> . pup
    (108) geometry_statement -> . setp
    (109) geometry_statement -> . pcolor
    (110) geometry_statement -> . psize
    (111) geometry_statement -> . pclear
    (28) type -> . INT
    (29) type -> . DOUBLE
    (30) type -> . STRING
    (31) type -> . VOID
    (40) expression -> . numeric_expression compare
    (84) loophead -> . FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 )
    (85) loophead -> . WHILE ( seen_while_LPAR superexpression seen_while_exp )
    (112) move -> . MOVE ( superexpression )
    (113) rotate -> . ROTATE ( superexpression )
    (114) arc -> . ARC ( superexpression COMMA superexpression )
    (115) home -> . HOME ( )
    (116) pdown -> . PDOWN ( )
    (117) pup -> . PUP ( )
    (118) setp -> . SETP ( superexpression COMMA superexpression )
    (119) pcolor -> . PCOLOR ( superexpression COMMA superexpression COMMA superexpression )
    (120) psize -> . PSIZE ( superexpression )
    (121) pclear -> . PCLEAR ( )
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    RBRACKET        reduce using rule 132 (empty -> .)
    ID              shift and go to state 115
    IF              shift and go to state 126
    RETURN          shift and go to state 120
    PRINT           shift and go to state 145
    SCAN            shift and go to state 130
    INT             shift and go to state 6
    DOUBLE          shift and go to state 4
    STRING          shift and go to state 9
    VOID            shift and go to state 7
    FOR             shift and go to state 128
    WHILE           shift and go to state 135
    MOVE            shift and go to state 111
    ROTATE          shift and go to state 113
    ARC             shift and go to state 117
    HOME            shift and go to state 118
    PDOWN           shift and go to state 148
    PUP             shift and go to state 142
    SETP            shift and go to state 134
    PCOLOR          shift and go to state 123
    PSIZE           shift and go to state 121
    PCLEAR          shift and go to state 131
    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41

    empty                          shift and go to state 109
    if_statement                   shift and go to state 110
    arc                            shift and go to state 112
    variable_declaration           shift and go to state 114
    type                           shift and go to state 2
    read_statement                 shift and go to state 116
    term                           shift and go to state 48
    expression                     shift and go to state 42
    loop_statement                 shift and go to state 119
    pup                            shift and go to state 122
    numeric_expression             shift and go to state 44
    pdown                          shift and go to state 124
    home                           shift and go to state 125
    factor                         shift and go to state 46
    pcolor                         shift and go to state 127
    psize                          shift and go to state 129
    statement                      shift and go to state 132
    setp                           shift and go to state 133
    cst_expression                 shift and go to state 38
    print_statement                shift and go to state 136
    return                         shift and go to state 137
    loophead                       shift and go to state 138
    rotate                         shift and go to state 139
    variable_assignment            shift and go to state 140
    block_statement2               shift and go to state 141
    geometry_statement             shift and go to state 143
    superexpression                shift and go to state 144
    pclear                         shift and go to state 146
    move                           shift and go to state 147

state 102

    (62) factor -> ( seen_lpar superexpression ) . seen_rpar
    (64) seen_rpar -> .

    *               reduce using rule 64 (seen_rpar -> .)
    /               reduce using rule 64 (seen_rpar -> .)
    +               reduce using rule 64 (seen_rpar -> .)
    -               reduce using rule 64 (seen_rpar -> .)
    CEQ             reduce using rule 64 (seen_rpar -> .)
    CGT             reduce using rule 64 (seen_rpar -> .)
    CGE             reduce using rule 64 (seen_rpar -> .)
    CLT             reduce using rule 64 (seen_rpar -> .)
    CLE             reduce using rule 64 (seen_rpar -> .)
    CNE             reduce using rule 64 (seen_rpar -> .)
    AND             reduce using rule 64 (seen_rpar -> .)
    OR              reduce using rule 64 (seen_rpar -> .)
    COMMA           reduce using rule 64 (seen_rpar -> .)
    SEMICOLON       reduce using rule 64 (seen_rpar -> .)
    )               reduce using rule 64 (seen_rpar -> .)
    RSQUARE         reduce using rule 64 (seen_rpar -> .)

    seen_rpar                      shift and go to state 149

state 103

    (70) cst_expression2 -> LSQUARE seen_LSQUARE . superexpression RSQUARE seen_RSQUARE
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 150
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 104

    (75) function_call -> seen_func_id ( . args )
    (77) args -> . arg
    (78) args -> . empty
    (79) arg -> . numeric_expression seen_arg more_args
    (132) empty -> .
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    )               reduce using rule 132 (empty -> .)
    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    empty                          shift and go to state 151
    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 153
    arg                            shift and go to state 152
    args                           shift and go to state 154
    term                           shift and go to state 48
    factor                         shift and go to state 46

state 105

    (41) compare -> compare_symbols numeric_expression seen_comp .

    AND             reduce using rule 41 (compare -> compare_symbols numeric_expression seen_comp .)
    OR              reduce using rule 41 (compare -> compare_symbols numeric_expression seen_comp .)
    COMMA           reduce using rule 41 (compare -> compare_symbols numeric_expression seen_comp .)
    SEMICOLON       reduce using rule 41 (compare -> compare_symbols numeric_expression seen_comp .)
    )               reduce using rule 41 (compare -> compare_symbols numeric_expression seen_comp .)
    RSQUARE         reduce using rule 41 (compare -> compare_symbols numeric_expression seen_comp .)


state 106

    (52) numeric_expression2 -> arithOp numeric_expression .

    CEQ             reduce using rule 52 (numeric_expression2 -> arithOp numeric_expression .)
    CGT             reduce using rule 52 (numeric_expression2 -> arithOp numeric_expression .)
    CGE             reduce using rule 52 (numeric_expression2 -> arithOp numeric_expression .)
    CLT             reduce using rule 52 (numeric_expression2 -> arithOp numeric_expression .)
    CLE             reduce using rule 52 (numeric_expression2 -> arithOp numeric_expression .)
    CNE             reduce using rule 52 (numeric_expression2 -> arithOp numeric_expression .)
    AND             reduce using rule 52 (numeric_expression2 -> arithOp numeric_expression .)
    OR              reduce using rule 52 (numeric_expression2 -> arithOp numeric_expression .)
    COMMA           reduce using rule 52 (numeric_expression2 -> arithOp numeric_expression .)
    SEMICOLON       reduce using rule 52 (numeric_expression2 -> arithOp numeric_expression .)
    )               reduce using rule 52 (numeric_expression2 -> arithOp numeric_expression .)
    RSQUARE         reduce using rule 52 (numeric_expression2 -> arithOp numeric_expression .)


state 107

    (24) parameter_list2 -> COMMA parameter_list .

    )               reduce using rule 24 (parameter_list2 -> COMMA parameter_list .)


state 108

    (21) method_declaration3 -> ) seen_method_start . block_statement
    (97) block_statement -> . LBRACKET block_statement2 RBRACKET

    LBRACKET        shift and go to state 101

    block_statement                shift and go to state 155

state 109

    (99) block_statement2 -> empty .

    RBRACKET        reduce using rule 99 (block_statement2 -> empty .)


state 110

    (125) statement -> if_statement .

    ID              reduce using rule 125 (statement -> if_statement .)
    IF              reduce using rule 125 (statement -> if_statement .)
    RETURN          reduce using rule 125 (statement -> if_statement .)
    PRINT           reduce using rule 125 (statement -> if_statement .)
    SCAN            reduce using rule 125 (statement -> if_statement .)
    INT             reduce using rule 125 (statement -> if_statement .)
    DOUBLE          reduce using rule 125 (statement -> if_statement .)
    STRING          reduce using rule 125 (statement -> if_statement .)
    VOID            reduce using rule 125 (statement -> if_statement .)
    FOR             reduce using rule 125 (statement -> if_statement .)
    WHILE           reduce using rule 125 (statement -> if_statement .)
    MOVE            reduce using rule 125 (statement -> if_statement .)
    ROTATE          reduce using rule 125 (statement -> if_statement .)
    ARC             reduce using rule 125 (statement -> if_statement .)
    HOME            reduce using rule 125 (statement -> if_statement .)
    PDOWN           reduce using rule 125 (statement -> if_statement .)
    PUP             reduce using rule 125 (statement -> if_statement .)
    SETP            reduce using rule 125 (statement -> if_statement .)
    PCOLOR          reduce using rule 125 (statement -> if_statement .)
    PSIZE           reduce using rule 125 (statement -> if_statement .)
    PCLEAR          reduce using rule 125 (statement -> if_statement .)
    (               reduce using rule 125 (statement -> if_statement .)
    CSTDOUBLE       reduce using rule 125 (statement -> if_statement .)
    CSTINT          reduce using rule 125 (statement -> if_statement .)
    CSTSTRING       reduce using rule 125 (statement -> if_statement .)
    RBRACKET        reduce using rule 125 (statement -> if_statement .)


state 111

    (112) move -> MOVE . ( superexpression )

    (               shift and go to state 156


state 112

    (104) geometry_statement -> arc .

    SEMICOLON       reduce using rule 104 (geometry_statement -> arc .)


state 113

    (113) rotate -> ROTATE . ( superexpression )

    (               shift and go to state 157


state 114

    (122) statement -> variable_declaration .

    ID              reduce using rule 122 (statement -> variable_declaration .)
    IF              reduce using rule 122 (statement -> variable_declaration .)
    RETURN          reduce using rule 122 (statement -> variable_declaration .)
    PRINT           reduce using rule 122 (statement -> variable_declaration .)
    SCAN            reduce using rule 122 (statement -> variable_declaration .)
    INT             reduce using rule 122 (statement -> variable_declaration .)
    DOUBLE          reduce using rule 122 (statement -> variable_declaration .)
    STRING          reduce using rule 122 (statement -> variable_declaration .)
    VOID            reduce using rule 122 (statement -> variable_declaration .)
    FOR             reduce using rule 122 (statement -> variable_declaration .)
    WHILE           reduce using rule 122 (statement -> variable_declaration .)
    MOVE            reduce using rule 122 (statement -> variable_declaration .)
    ROTATE          reduce using rule 122 (statement -> variable_declaration .)
    ARC             reduce using rule 122 (statement -> variable_declaration .)
    HOME            reduce using rule 122 (statement -> variable_declaration .)
    PDOWN           reduce using rule 122 (statement -> variable_declaration .)
    PUP             reduce using rule 122 (statement -> variable_declaration .)
    SETP            reduce using rule 122 (statement -> variable_declaration .)
    PCOLOR          reduce using rule 122 (statement -> variable_declaration .)
    PSIZE           reduce using rule 122 (statement -> variable_declaration .)
    PCLEAR          reduce using rule 122 (statement -> variable_declaration .)
    (               reduce using rule 122 (statement -> variable_declaration .)
    CSTDOUBLE       reduce using rule 122 (statement -> variable_declaration .)
    CSTINT          reduce using rule 122 (statement -> variable_declaration .)
    CSTSTRING       reduce using rule 122 (statement -> variable_declaration .)
    RBRACKET        reduce using rule 122 (statement -> variable_declaration .)


state 115

    (32) variable_assignment -> ID . id_or_array
    (68) cst_expression -> ID . seen_id_or_func cst_expression2
    (33) id_or_array -> . = superexpression
    (34) id_or_array -> . LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE = superexpression
    (69) seen_id_or_func -> .

  ! shift/reduce conflict for LSQUARE resolved as shift
    =               shift and go to state 158
    LSQUARE         shift and go to state 160
    (               reduce using rule 69 (seen_id_or_func -> .)
    *               reduce using rule 69 (seen_id_or_func -> .)
    /               reduce using rule 69 (seen_id_or_func -> .)
    +               reduce using rule 69 (seen_id_or_func -> .)
    -               reduce using rule 69 (seen_id_or_func -> .)
    CEQ             reduce using rule 69 (seen_id_or_func -> .)
    CGT             reduce using rule 69 (seen_id_or_func -> .)
    CGE             reduce using rule 69 (seen_id_or_func -> .)
    CLT             reduce using rule 69 (seen_id_or_func -> .)
    CLE             reduce using rule 69 (seen_id_or_func -> .)
    CNE             reduce using rule 69 (seen_id_or_func -> .)
    AND             reduce using rule 69 (seen_id_or_func -> .)
    OR              reduce using rule 69 (seen_id_or_func -> .)
    SEMICOLON       reduce using rule 69 (seen_id_or_func -> .)

  ! LSQUARE         [ reduce using rule 69 (seen_id_or_func -> .) ]

    seen_id_or_func                shift and go to state 53
    id_or_array                    shift and go to state 159

state 116

    (129) statement -> read_statement .

    ID              reduce using rule 129 (statement -> read_statement .)
    IF              reduce using rule 129 (statement -> read_statement .)
    RETURN          reduce using rule 129 (statement -> read_statement .)
    PRINT           reduce using rule 129 (statement -> read_statement .)
    SCAN            reduce using rule 129 (statement -> read_statement .)
    INT             reduce using rule 129 (statement -> read_statement .)
    DOUBLE          reduce using rule 129 (statement -> read_statement .)
    STRING          reduce using rule 129 (statement -> read_statement .)
    VOID            reduce using rule 129 (statement -> read_statement .)
    FOR             reduce using rule 129 (statement -> read_statement .)
    WHILE           reduce using rule 129 (statement -> read_statement .)
    MOVE            reduce using rule 129 (statement -> read_statement .)
    ROTATE          reduce using rule 129 (statement -> read_statement .)
    ARC             reduce using rule 129 (statement -> read_statement .)
    HOME            reduce using rule 129 (statement -> read_statement .)
    PDOWN           reduce using rule 129 (statement -> read_statement .)
    PUP             reduce using rule 129 (statement -> read_statement .)
    SETP            reduce using rule 129 (statement -> read_statement .)
    PCOLOR          reduce using rule 129 (statement -> read_statement .)
    PSIZE           reduce using rule 129 (statement -> read_statement .)
    PCLEAR          reduce using rule 129 (statement -> read_statement .)
    (               reduce using rule 129 (statement -> read_statement .)
    CSTDOUBLE       reduce using rule 129 (statement -> read_statement .)
    CSTINT          reduce using rule 129 (statement -> read_statement .)
    CSTSTRING       reduce using rule 129 (statement -> read_statement .)
    RBRACKET        reduce using rule 129 (statement -> read_statement .)


state 117

    (114) arc -> ARC . ( superexpression COMMA superexpression )

    (               shift and go to state 161


state 118

    (115) home -> HOME . ( )

    (               shift and go to state 162


state 119

    (126) statement -> loop_statement .

    ID              reduce using rule 126 (statement -> loop_statement .)
    IF              reduce using rule 126 (statement -> loop_statement .)
    RETURN          reduce using rule 126 (statement -> loop_statement .)
    PRINT           reduce using rule 126 (statement -> loop_statement .)
    SCAN            reduce using rule 126 (statement -> loop_statement .)
    INT             reduce using rule 126 (statement -> loop_statement .)
    DOUBLE          reduce using rule 126 (statement -> loop_statement .)
    STRING          reduce using rule 126 (statement -> loop_statement .)
    VOID            reduce using rule 126 (statement -> loop_statement .)
    FOR             reduce using rule 126 (statement -> loop_statement .)
    WHILE           reduce using rule 126 (statement -> loop_statement .)
    MOVE            reduce using rule 126 (statement -> loop_statement .)
    ROTATE          reduce using rule 126 (statement -> loop_statement .)
    ARC             reduce using rule 126 (statement -> loop_statement .)
    HOME            reduce using rule 126 (statement -> loop_statement .)
    PDOWN           reduce using rule 126 (statement -> loop_statement .)
    PUP             reduce using rule 126 (statement -> loop_statement .)
    SETP            reduce using rule 126 (statement -> loop_statement .)
    PCOLOR          reduce using rule 126 (statement -> loop_statement .)
    PSIZE           reduce using rule 126 (statement -> loop_statement .)
    PCLEAR          reduce using rule 126 (statement -> loop_statement .)
    (               reduce using rule 126 (statement -> loop_statement .)
    CSTDOUBLE       reduce using rule 126 (statement -> loop_statement .)
    CSTINT          reduce using rule 126 (statement -> loop_statement .)
    CSTSTRING       reduce using rule 126 (statement -> loop_statement .)
    RBRACKET        reduce using rule 126 (statement -> loop_statement .)


state 120

    (131) return -> RETURN . superexpression SEMICOLON
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 163
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 121

    (120) psize -> PSIZE . ( superexpression )

    (               shift and go to state 164


state 122

    (107) geometry_statement -> pup .

    SEMICOLON       reduce using rule 107 (geometry_statement -> pup .)


state 123

    (119) pcolor -> PCOLOR . ( superexpression COMMA superexpression COMMA superexpression )

    (               shift and go to state 165


state 124

    (106) geometry_statement -> pdown .

    SEMICOLON       reduce using rule 106 (geometry_statement -> pdown .)


state 125

    (105) geometry_statement -> home .

    SEMICOLON       reduce using rule 105 (geometry_statement -> home .)


state 126

    (92) if_statement -> IF . ( superexpression ) seen_condition block_statement seen_condition_block if_statement2

    (               shift and go to state 166


state 127

    (109) geometry_statement -> pcolor .

    SEMICOLON       reduce using rule 109 (geometry_statement -> pcolor .)


state 128

    (84) loophead -> FOR . ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 )

    (               shift and go to state 167


state 129

    (110) geometry_statement -> psize .

    SEMICOLON       reduce using rule 110 (geometry_statement -> psize .)


state 130

    (100) read_statement -> SCAN . ( ID ) SEMICOLON

    (               shift and go to state 168


state 131

    (121) pclear -> PCLEAR . ( )

    (               shift and go to state 169


state 132

    (98) block_statement2 -> statement . block_statement2
    (98) block_statement2 -> . statement block_statement2
    (99) block_statement2 -> . empty
    (122) statement -> . variable_declaration
    (123) statement -> . variable_assignment SEMICOLON
    (124) statement -> . superexpression SEMICOLON
    (125) statement -> . if_statement
    (126) statement -> . loop_statement
    (127) statement -> . return
    (128) statement -> . print_statement
    (129) statement -> . read_statement
    (130) statement -> . geometry_statement SEMICOLON
    (132) empty -> .
    (7) variable_declaration -> . type variable_declaration2
    (32) variable_assignment -> . ID id_or_array
    (35) superexpression -> . expression superexpression2
    (92) if_statement -> . IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2
    (83) loop_statement -> . loophead block_statement seen_loop_block
    (131) return -> . RETURN superexpression SEMICOLON
    (101) print_statement -> . PRINT ( superexpression ) SEMICOLON
    (100) read_statement -> . SCAN ( ID ) SEMICOLON
    (102) geometry_statement -> . move
    (103) geometry_statement -> . rotate
    (104) geometry_statement -> . arc
    (105) geometry_statement -> . home
    (106) geometry_statement -> . pdown
    (107) geometry_statement -> . pup
    (108) geometry_statement -> . setp
    (109) geometry_statement -> . pcolor
    (110) geometry_statement -> . psize
    (111) geometry_statement -> . pclear
    (28) type -> . INT
    (29) type -> . DOUBLE
    (30) type -> . STRING
    (31) type -> . VOID
    (40) expression -> . numeric_expression compare
    (84) loophead -> . FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 )
    (85) loophead -> . WHILE ( seen_while_LPAR superexpression seen_while_exp )
    (112) move -> . MOVE ( superexpression )
    (113) rotate -> . ROTATE ( superexpression )
    (114) arc -> . ARC ( superexpression COMMA superexpression )
    (115) home -> . HOME ( )
    (116) pdown -> . PDOWN ( )
    (117) pup -> . PUP ( )
    (118) setp -> . SETP ( superexpression COMMA superexpression )
    (119) pcolor -> . PCOLOR ( superexpression COMMA superexpression COMMA superexpression )
    (120) psize -> . PSIZE ( superexpression )
    (121) pclear -> . PCLEAR ( )
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    RBRACKET        reduce using rule 132 (empty -> .)
    ID              shift and go to state 115
    IF              shift and go to state 126
    RETURN          shift and go to state 120
    PRINT           shift and go to state 145
    SCAN            shift and go to state 130
    INT             shift and go to state 6
    DOUBLE          shift and go to state 4
    STRING          shift and go to state 9
    VOID            shift and go to state 7
    FOR             shift and go to state 128
    WHILE           shift and go to state 135
    MOVE            shift and go to state 111
    ROTATE          shift and go to state 113
    ARC             shift and go to state 117
    HOME            shift and go to state 118
    PDOWN           shift and go to state 148
    PUP             shift and go to state 142
    SETP            shift and go to state 134
    PCOLOR          shift and go to state 123
    PSIZE           shift and go to state 121
    PCLEAR          shift and go to state 131
    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41

    empty                          shift and go to state 109
    if_statement                   shift and go to state 110
    arc                            shift and go to state 112
    variable_declaration           shift and go to state 114
    type                           shift and go to state 2
    read_statement                 shift and go to state 116
    term                           shift and go to state 48
    expression                     shift and go to state 42
    loop_statement                 shift and go to state 119
    pup                            shift and go to state 122
    numeric_expression             shift and go to state 44
    pdown                          shift and go to state 124
    home                           shift and go to state 125
    factor                         shift and go to state 46
    pcolor                         shift and go to state 127
    psize                          shift and go to state 129
    statement                      shift and go to state 132
    setp                           shift and go to state 133
    cst_expression                 shift and go to state 38
    print_statement                shift and go to state 136
    return                         shift and go to state 137
    loophead                       shift and go to state 138
    rotate                         shift and go to state 139
    variable_assignment            shift and go to state 140
    block_statement2               shift and go to state 170
    geometry_statement             shift and go to state 143
    superexpression                shift and go to state 144
    pclear                         shift and go to state 146
    move                           shift and go to state 147

state 133

    (108) geometry_statement -> setp .

    SEMICOLON       reduce using rule 108 (geometry_statement -> setp .)


state 134

    (118) setp -> SETP . ( superexpression COMMA superexpression )

    (               shift and go to state 171


state 135

    (85) loophead -> WHILE . ( seen_while_LPAR superexpression seen_while_exp )

    (               shift and go to state 172


state 136

    (128) statement -> print_statement .

    ID              reduce using rule 128 (statement -> print_statement .)
    IF              reduce using rule 128 (statement -> print_statement .)
    RETURN          reduce using rule 128 (statement -> print_statement .)
    PRINT           reduce using rule 128 (statement -> print_statement .)
    SCAN            reduce using rule 128 (statement -> print_statement .)
    INT             reduce using rule 128 (statement -> print_statement .)
    DOUBLE          reduce using rule 128 (statement -> print_statement .)
    STRING          reduce using rule 128 (statement -> print_statement .)
    VOID            reduce using rule 128 (statement -> print_statement .)
    FOR             reduce using rule 128 (statement -> print_statement .)
    WHILE           reduce using rule 128 (statement -> print_statement .)
    MOVE            reduce using rule 128 (statement -> print_statement .)
    ROTATE          reduce using rule 128 (statement -> print_statement .)
    ARC             reduce using rule 128 (statement -> print_statement .)
    HOME            reduce using rule 128 (statement -> print_statement .)
    PDOWN           reduce using rule 128 (statement -> print_statement .)
    PUP             reduce using rule 128 (statement -> print_statement .)
    SETP            reduce using rule 128 (statement -> print_statement .)
    PCOLOR          reduce using rule 128 (statement -> print_statement .)
    PSIZE           reduce using rule 128 (statement -> print_statement .)
    PCLEAR          reduce using rule 128 (statement -> print_statement .)
    (               reduce using rule 128 (statement -> print_statement .)
    CSTDOUBLE       reduce using rule 128 (statement -> print_statement .)
    CSTINT          reduce using rule 128 (statement -> print_statement .)
    CSTSTRING       reduce using rule 128 (statement -> print_statement .)
    RBRACKET        reduce using rule 128 (statement -> print_statement .)


state 137

    (127) statement -> return .

    ID              reduce using rule 127 (statement -> return .)
    IF              reduce using rule 127 (statement -> return .)
    RETURN          reduce using rule 127 (statement -> return .)
    PRINT           reduce using rule 127 (statement -> return .)
    SCAN            reduce using rule 127 (statement -> return .)
    INT             reduce using rule 127 (statement -> return .)
    DOUBLE          reduce using rule 127 (statement -> return .)
    STRING          reduce using rule 127 (statement -> return .)
    VOID            reduce using rule 127 (statement -> return .)
    FOR             reduce using rule 127 (statement -> return .)
    WHILE           reduce using rule 127 (statement -> return .)
    MOVE            reduce using rule 127 (statement -> return .)
    ROTATE          reduce using rule 127 (statement -> return .)
    ARC             reduce using rule 127 (statement -> return .)
    HOME            reduce using rule 127 (statement -> return .)
    PDOWN           reduce using rule 127 (statement -> return .)
    PUP             reduce using rule 127 (statement -> return .)
    SETP            reduce using rule 127 (statement -> return .)
    PCOLOR          reduce using rule 127 (statement -> return .)
    PSIZE           reduce using rule 127 (statement -> return .)
    PCLEAR          reduce using rule 127 (statement -> return .)
    (               reduce using rule 127 (statement -> return .)
    CSTDOUBLE       reduce using rule 127 (statement -> return .)
    CSTINT          reduce using rule 127 (statement -> return .)
    CSTSTRING       reduce using rule 127 (statement -> return .)
    RBRACKET        reduce using rule 127 (statement -> return .)


state 138

    (83) loop_statement -> loophead . block_statement seen_loop_block
    (97) block_statement -> . LBRACKET block_statement2 RBRACKET

    LBRACKET        shift and go to state 101

    block_statement                shift and go to state 173

state 139

    (103) geometry_statement -> rotate .

    SEMICOLON       reduce using rule 103 (geometry_statement -> rotate .)


state 140

    (123) statement -> variable_assignment . SEMICOLON

    SEMICOLON       shift and go to state 174


state 141

    (97) block_statement -> LBRACKET block_statement2 . RBRACKET

    RBRACKET        shift and go to state 175


state 142

    (117) pup -> PUP . ( )

    (               shift and go to state 176


state 143

    (130) statement -> geometry_statement . SEMICOLON

    SEMICOLON       shift and go to state 177


state 144

    (124) statement -> superexpression . SEMICOLON

    SEMICOLON       shift and go to state 178


state 145

    (101) print_statement -> PRINT . ( superexpression ) SEMICOLON

    (               shift and go to state 179


state 146

    (111) geometry_statement -> pclear .

    SEMICOLON       reduce using rule 111 (geometry_statement -> pclear .)


state 147

    (102) geometry_statement -> move .

    SEMICOLON       reduce using rule 102 (geometry_statement -> move .)


state 148

    (116) pdown -> PDOWN . ( )

    (               shift and go to state 180


state 149

    (62) factor -> ( seen_lpar superexpression ) seen_rpar .

    *               reduce using rule 62 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    /               reduce using rule 62 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    +               reduce using rule 62 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    -               reduce using rule 62 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    CEQ             reduce using rule 62 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    CGT             reduce using rule 62 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    CGE             reduce using rule 62 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    CLT             reduce using rule 62 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    CLE             reduce using rule 62 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    CNE             reduce using rule 62 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    AND             reduce using rule 62 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    OR              reduce using rule 62 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    COMMA           reduce using rule 62 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    RSQUARE         reduce using rule 62 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    SEMICOLON       reduce using rule 62 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    )               reduce using rule 62 (factor -> ( seen_lpar superexpression ) seen_rpar .)


state 150

    (70) cst_expression2 -> LSQUARE seen_LSQUARE superexpression . RSQUARE seen_RSQUARE

    RSQUARE         shift and go to state 181


state 151

    (78) args -> empty .

    )               reduce using rule 78 (args -> empty .)


state 152

    (77) args -> arg .

    )               reduce using rule 77 (args -> arg .)


state 153

    (79) arg -> numeric_expression . seen_arg more_args
    (80) seen_arg -> .

    COMMA           reduce using rule 80 (seen_arg -> .)
    )               reduce using rule 80 (seen_arg -> .)

    seen_arg                       shift and go to state 182

state 154

    (75) function_call -> seen_func_id ( args . )

    )               shift and go to state 183


state 155

    (21) method_declaration3 -> ) seen_method_start block_statement .

    FUNC            reduce using rule 21 (method_declaration3 -> ) seen_method_start block_statement .)
    MAIN            reduce using rule 21 (method_declaration3 -> ) seen_method_start block_statement .)


state 156

    (112) move -> MOVE ( . superexpression )
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 184
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 157

    (113) rotate -> ROTATE ( . superexpression )
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 185
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 158

    (33) id_or_array -> = . superexpression
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 186
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 159

    (32) variable_assignment -> ID id_or_array .

    SEMICOLON       reduce using rule 32 (variable_assignment -> ID id_or_array .)
    )               reduce using rule 32 (variable_assignment -> ID id_or_array .)


state 160

    (34) id_or_array -> LSQUARE . seen_LSQUARE superexpression RSQUARE seen_RSQUARE = superexpression
    (73) seen_LSQUARE -> .

    (               reduce using rule 73 (seen_LSQUARE -> .)
    CSTDOUBLE       reduce using rule 73 (seen_LSQUARE -> .)
    CSTINT          reduce using rule 73 (seen_LSQUARE -> .)
    CSTSTRING       reduce using rule 73 (seen_LSQUARE -> .)
    ID              reduce using rule 73 (seen_LSQUARE -> .)

    seen_LSQUARE                   shift and go to state 187

state 161

    (114) arc -> ARC ( . superexpression COMMA superexpression )
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 188
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 162

    (115) home -> HOME ( . )

    )               shift and go to state 189


state 163

    (131) return -> RETURN superexpression . SEMICOLON

    SEMICOLON       shift and go to state 190


state 164

    (120) psize -> PSIZE ( . superexpression )
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 191
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 165

    (119) pcolor -> PCOLOR ( . superexpression COMMA superexpression COMMA superexpression )
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 192
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 166

    (92) if_statement -> IF ( . superexpression ) seen_condition block_statement seen_condition_block if_statement2
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 193
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 38

state 167

    (84) loophead -> FOR ( . variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 )
    (32) variable_assignment -> . ID id_or_array

    ID              shift and go to state 195

    variable_assignment            shift and go to state 194

state 168

    (100) read_statement -> SCAN ( . ID ) SEMICOLON

    ID              shift and go to state 196


state 169

    (121) pclear -> PCLEAR ( . )

    )               shift and go to state 197


state 170

    (98) block_statement2 -> statement block_statement2 .

    RBRACKET        reduce using rule 98 (block_statement2 -> statement block_statement2 .)


state 171

    (118) setp -> SETP ( . superexpression COMMA superexpression )
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 198
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 172

    (85) loophead -> WHILE ( . seen_while_LPAR superexpression seen_while_exp )
    (89) seen_while_LPAR -> .

    (               reduce using rule 89 (seen_while_LPAR -> .)
    CSTDOUBLE       reduce using rule 89 (seen_while_LPAR -> .)
    CSTINT          reduce using rule 89 (seen_while_LPAR -> .)
    CSTSTRING       reduce using rule 89 (seen_while_LPAR -> .)
    ID              reduce using rule 89 (seen_while_LPAR -> .)

    seen_while_LPAR                shift and go to state 199

state 173

    (83) loop_statement -> loophead block_statement . seen_loop_block
    (91) seen_loop_block -> .

    ID              reduce using rule 91 (seen_loop_block -> .)
    IF              reduce using rule 91 (seen_loop_block -> .)
    RETURN          reduce using rule 91 (seen_loop_block -> .)
    PRINT           reduce using rule 91 (seen_loop_block -> .)
    SCAN            reduce using rule 91 (seen_loop_block -> .)
    INT             reduce using rule 91 (seen_loop_block -> .)
    DOUBLE          reduce using rule 91 (seen_loop_block -> .)
    STRING          reduce using rule 91 (seen_loop_block -> .)
    VOID            reduce using rule 91 (seen_loop_block -> .)
    FOR             reduce using rule 91 (seen_loop_block -> .)
    WHILE           reduce using rule 91 (seen_loop_block -> .)
    MOVE            reduce using rule 91 (seen_loop_block -> .)
    ROTATE          reduce using rule 91 (seen_loop_block -> .)
    ARC             reduce using rule 91 (seen_loop_block -> .)
    HOME            reduce using rule 91 (seen_loop_block -> .)
    PDOWN           reduce using rule 91 (seen_loop_block -> .)
    PUP             reduce using rule 91 (seen_loop_block -> .)
    SETP            reduce using rule 91 (seen_loop_block -> .)
    PCOLOR          reduce using rule 91 (seen_loop_block -> .)
    PSIZE           reduce using rule 91 (seen_loop_block -> .)
    PCLEAR          reduce using rule 91 (seen_loop_block -> .)
    (               reduce using rule 91 (seen_loop_block -> .)
    CSTDOUBLE       reduce using rule 91 (seen_loop_block -> .)
    CSTINT          reduce using rule 91 (seen_loop_block -> .)
    CSTSTRING       reduce using rule 91 (seen_loop_block -> .)
    RBRACKET        reduce using rule 91 (seen_loop_block -> .)

    seen_loop_block                shift and go to state 200

state 174

    (123) statement -> variable_assignment SEMICOLON .

    ID              reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    IF              reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    RETURN          reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    PRINT           reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    SCAN            reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    INT             reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    DOUBLE          reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    STRING          reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    VOID            reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    FOR             reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    WHILE           reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    MOVE            reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    ROTATE          reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    ARC             reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    HOME            reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    PDOWN           reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    PUP             reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    SETP            reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    PCOLOR          reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    PSIZE           reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    PCLEAR          reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    (               reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    CSTDOUBLE       reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    CSTINT          reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    CSTSTRING       reduce using rule 123 (statement -> variable_assignment SEMICOLON .)
    RBRACKET        reduce using rule 123 (statement -> variable_assignment SEMICOLON .)


state 175

    (97) block_statement -> LBRACKET block_statement2 RBRACKET .

    FUNC            reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    MAIN            reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    ID              reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    IF              reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    RETURN          reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    PRINT           reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    SCAN            reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    INT             reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    DOUBLE          reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    STRING          reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    VOID            reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    FOR             reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    WHILE           reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    MOVE            reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    ROTATE          reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    ARC             reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    HOME            reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    PDOWN           reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    PUP             reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    SETP            reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    PCOLOR          reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    PSIZE           reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    PCLEAR          reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    (               reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    CSTDOUBLE       reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    CSTINT          reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    CSTSTRING       reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    RBRACKET        reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    ELSE            reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    $end            reduce using rule 97 (block_statement -> LBRACKET block_statement2 RBRACKET .)


state 176

    (117) pup -> PUP ( . )

    )               shift and go to state 201


state 177

    (130) statement -> geometry_statement SEMICOLON .

    ID              reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    IF              reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    RETURN          reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    PRINT           reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    SCAN            reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    INT             reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    DOUBLE          reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    STRING          reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    VOID            reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    FOR             reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    WHILE           reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    MOVE            reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    ROTATE          reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    ARC             reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    HOME            reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    PDOWN           reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    PUP             reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    SETP            reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    PCOLOR          reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    PSIZE           reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    PCLEAR          reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    (               reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    CSTDOUBLE       reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    CSTINT          reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    CSTSTRING       reduce using rule 130 (statement -> geometry_statement SEMICOLON .)
    RBRACKET        reduce using rule 130 (statement -> geometry_statement SEMICOLON .)


state 178

    (124) statement -> superexpression SEMICOLON .

    ID              reduce using rule 124 (statement -> superexpression SEMICOLON .)
    IF              reduce using rule 124 (statement -> superexpression SEMICOLON .)
    RETURN          reduce using rule 124 (statement -> superexpression SEMICOLON .)
    PRINT           reduce using rule 124 (statement -> superexpression SEMICOLON .)
    SCAN            reduce using rule 124 (statement -> superexpression SEMICOLON .)
    INT             reduce using rule 124 (statement -> superexpression SEMICOLON .)
    DOUBLE          reduce using rule 124 (statement -> superexpression SEMICOLON .)
    STRING          reduce using rule 124 (statement -> superexpression SEMICOLON .)
    VOID            reduce using rule 124 (statement -> superexpression SEMICOLON .)
    FOR             reduce using rule 124 (statement -> superexpression SEMICOLON .)
    WHILE           reduce using rule 124 (statement -> superexpression SEMICOLON .)
    MOVE            reduce using rule 124 (statement -> superexpression SEMICOLON .)
    ROTATE          reduce using rule 124 (statement -> superexpression SEMICOLON .)
    ARC             reduce using rule 124 (statement -> superexpression SEMICOLON .)
    HOME            reduce using rule 124 (statement -> superexpression SEMICOLON .)
    PDOWN           reduce using rule 124 (statement -> superexpression SEMICOLON .)
    PUP             reduce using rule 124 (statement -> superexpression SEMICOLON .)
    SETP            reduce using rule 124 (statement -> superexpression SEMICOLON .)
    PCOLOR          reduce using rule 124 (statement -> superexpression SEMICOLON .)
    PSIZE           reduce using rule 124 (statement -> superexpression SEMICOLON .)
    PCLEAR          reduce using rule 124 (statement -> superexpression SEMICOLON .)
    (               reduce using rule 124 (statement -> superexpression SEMICOLON .)
    CSTDOUBLE       reduce using rule 124 (statement -> superexpression SEMICOLON .)
    CSTINT          reduce using rule 124 (statement -> superexpression SEMICOLON .)
    CSTSTRING       reduce using rule 124 (statement -> superexpression SEMICOLON .)
    RBRACKET        reduce using rule 124 (statement -> superexpression SEMICOLON .)


state 179

    (101) print_statement -> PRINT ( . superexpression ) SEMICOLON
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 202
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 180

    (116) pdown -> PDOWN ( . )

    )               shift and go to state 203


state 181

    (70) cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE . seen_RSQUARE
    (74) seen_RSQUARE -> .

    *               reduce using rule 74 (seen_RSQUARE -> .)
    /               reduce using rule 74 (seen_RSQUARE -> .)
    +               reduce using rule 74 (seen_RSQUARE -> .)
    -               reduce using rule 74 (seen_RSQUARE -> .)
    CEQ             reduce using rule 74 (seen_RSQUARE -> .)
    CGT             reduce using rule 74 (seen_RSQUARE -> .)
    CGE             reduce using rule 74 (seen_RSQUARE -> .)
    CLT             reduce using rule 74 (seen_RSQUARE -> .)
    CLE             reduce using rule 74 (seen_RSQUARE -> .)
    CNE             reduce using rule 74 (seen_RSQUARE -> .)
    AND             reduce using rule 74 (seen_RSQUARE -> .)
    OR              reduce using rule 74 (seen_RSQUARE -> .)
    COMMA           reduce using rule 74 (seen_RSQUARE -> .)
    SEMICOLON       reduce using rule 74 (seen_RSQUARE -> .)
    )               reduce using rule 74 (seen_RSQUARE -> .)
    RSQUARE         reduce using rule 74 (seen_RSQUARE -> .)

    seen_RSQUARE                   shift and go to state 204

state 182

    (79) arg -> numeric_expression seen_arg . more_args
    (81) more_args -> . COMMA arg
    (82) more_args -> . empty
    (132) empty -> .

    COMMA           shift and go to state 207
    )               reduce using rule 132 (empty -> .)

    empty                          shift and go to state 205
    more_args                      shift and go to state 206

state 183

    (75) function_call -> seen_func_id ( args ) .

    *               reduce using rule 75 (function_call -> seen_func_id ( args ) .)
    /               reduce using rule 75 (function_call -> seen_func_id ( args ) .)
    +               reduce using rule 75 (function_call -> seen_func_id ( args ) .)
    -               reduce using rule 75 (function_call -> seen_func_id ( args ) .)
    CEQ             reduce using rule 75 (function_call -> seen_func_id ( args ) .)
    CGT             reduce using rule 75 (function_call -> seen_func_id ( args ) .)
    CGE             reduce using rule 75 (function_call -> seen_func_id ( args ) .)
    CLT             reduce using rule 75 (function_call -> seen_func_id ( args ) .)
    CLE             reduce using rule 75 (function_call -> seen_func_id ( args ) .)
    CNE             reduce using rule 75 (function_call -> seen_func_id ( args ) .)
    AND             reduce using rule 75 (function_call -> seen_func_id ( args ) .)
    OR              reduce using rule 75 (function_call -> seen_func_id ( args ) .)
    COMMA           reduce using rule 75 (function_call -> seen_func_id ( args ) .)
    SEMICOLON       reduce using rule 75 (function_call -> seen_func_id ( args ) .)
    )               reduce using rule 75 (function_call -> seen_func_id ( args ) .)
    RSQUARE         reduce using rule 75 (function_call -> seen_func_id ( args ) .)


state 184

    (112) move -> MOVE ( superexpression . )

    )               shift and go to state 208


state 185

    (113) rotate -> ROTATE ( superexpression . )

    )               shift and go to state 209


state 186

    (33) id_or_array -> = superexpression .

    SEMICOLON       reduce using rule 33 (id_or_array -> = superexpression .)
    )               reduce using rule 33 (id_or_array -> = superexpression .)


state 187

    (34) id_or_array -> LSQUARE seen_LSQUARE . superexpression RSQUARE seen_RSQUARE = superexpression
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 210
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 188

    (114) arc -> ARC ( superexpression . COMMA superexpression )

    COMMA           shift and go to state 211


state 189

    (115) home -> HOME ( ) .

    SEMICOLON       reduce using rule 115 (home -> HOME ( ) .)


state 190

    (131) return -> RETURN superexpression SEMICOLON .

    ID              reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    IF              reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    RETURN          reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    PRINT           reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    SCAN            reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    INT             reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    DOUBLE          reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    STRING          reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    VOID            reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    FOR             reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    WHILE           reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    MOVE            reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    ROTATE          reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    ARC             reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    HOME            reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    PDOWN           reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    PUP             reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    SETP            reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    PCOLOR          reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    PSIZE           reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    PCLEAR          reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    (               reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    CSTDOUBLE       reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    CSTINT          reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    CSTSTRING       reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)
    RBRACKET        reduce using rule 131 (return -> RETURN superexpression SEMICOLON .)


state 191

    (120) psize -> PSIZE ( superexpression . )

    )               shift and go to state 212


state 192

    (119) pcolor -> PCOLOR ( superexpression . COMMA superexpression COMMA superexpression )

    COMMA           shift and go to state 213


state 193

    (92) if_statement -> IF ( superexpression . ) seen_condition block_statement seen_condition_block if_statement2

    )               shift and go to state 214


state 194

    (84) loophead -> FOR ( variable_assignment . seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 )
    (86) seen_assignment1 -> .

    SEMICOLON       reduce using rule 86 (seen_assignment1 -> .)

    seen_assignment1               shift and go to state 215

state 195

    (32) variable_assignment -> ID . id_or_array
    (33) id_or_array -> . = superexpression
    (34) id_or_array -> . LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE = superexpression

    =               shift and go to state 158
    LSQUARE         shift and go to state 160

    id_or_array                    shift and go to state 159

state 196

    (100) read_statement -> SCAN ( ID . ) SEMICOLON

    )               shift and go to state 216


state 197

    (121) pclear -> PCLEAR ( ) .

    SEMICOLON       reduce using rule 121 (pclear -> PCLEAR ( ) .)


state 198

    (118) setp -> SETP ( superexpression . COMMA superexpression )

    COMMA           shift and go to state 217


state 199

    (85) loophead -> WHILE ( seen_while_LPAR . superexpression seen_while_exp )
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 218
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 200

    (83) loop_statement -> loophead block_statement seen_loop_block .

    ID              reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    IF              reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    RETURN          reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    PRINT           reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    SCAN            reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    INT             reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    DOUBLE          reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    STRING          reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    VOID            reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    FOR             reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    WHILE           reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    MOVE            reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    ROTATE          reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    ARC             reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    HOME            reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    PDOWN           reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    PUP             reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    SETP            reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    PCOLOR          reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    PSIZE           reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    PCLEAR          reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    (               reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    CSTDOUBLE       reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    CSTINT          reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    CSTSTRING       reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)
    RBRACKET        reduce using rule 83 (loop_statement -> loophead block_statement seen_loop_block .)


state 201

    (117) pup -> PUP ( ) .

    SEMICOLON       reduce using rule 117 (pup -> PUP ( ) .)


state 202

    (101) print_statement -> PRINT ( superexpression . ) SEMICOLON

    )               shift and go to state 219


state 203

    (116) pdown -> PDOWN ( ) .

    SEMICOLON       reduce using rule 116 (pdown -> PDOWN ( ) .)


state 204

    (70) cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE .

    *               reduce using rule 70 (cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE .)
    /               reduce using rule 70 (cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE .)
    +               reduce using rule 70 (cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE .)
    -               reduce using rule 70 (cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE .)
    CEQ             reduce using rule 70 (cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE .)
    CGT             reduce using rule 70 (cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE .)
    CGE             reduce using rule 70 (cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE .)
    CLT             reduce using rule 70 (cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE .)
    CLE             reduce using rule 70 (cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE .)
    CNE             reduce using rule 70 (cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE .)
    AND             reduce using rule 70 (cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE .)
    OR              reduce using rule 70 (cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE .)
    COMMA           reduce using rule 70 (cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE .)
    SEMICOLON       reduce using rule 70 (cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE .)
    )               reduce using rule 70 (cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE .)
    RSQUARE         reduce using rule 70 (cst_expression2 -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE .)


state 205

    (82) more_args -> empty .

    )               reduce using rule 82 (more_args -> empty .)


state 206

    (79) arg -> numeric_expression seen_arg more_args .

    )               reduce using rule 79 (arg -> numeric_expression seen_arg more_args .)


state 207

    (81) more_args -> COMMA . arg
    (79) arg -> . numeric_expression seen_arg more_args
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 153
    arg                            shift and go to state 220
    term                           shift and go to state 48
    factor                         shift and go to state 46

state 208

    (112) move -> MOVE ( superexpression ) .

    SEMICOLON       reduce using rule 112 (move -> MOVE ( superexpression ) .)


state 209

    (113) rotate -> ROTATE ( superexpression ) .

    SEMICOLON       reduce using rule 113 (rotate -> ROTATE ( superexpression ) .)


state 210

    (34) id_or_array -> LSQUARE seen_LSQUARE superexpression . RSQUARE seen_RSQUARE = superexpression

    RSQUARE         shift and go to state 221


state 211

    (114) arc -> ARC ( superexpression COMMA . superexpression )
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 222
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 212

    (120) psize -> PSIZE ( superexpression ) .

    SEMICOLON       reduce using rule 120 (psize -> PSIZE ( superexpression ) .)


state 213

    (119) pcolor -> PCOLOR ( superexpression COMMA . superexpression COMMA superexpression )
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 223
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 214

    (92) if_statement -> IF ( superexpression ) . seen_condition block_statement seen_condition_block if_statement2
    (93) seen_condition -> .

    LBRACKET        reduce using rule 93 (seen_condition -> .)

    seen_condition                 shift and go to state 224

state 215

    (84) loophead -> FOR ( variable_assignment seen_assignment1 . SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 )

    SEMICOLON       shift and go to state 225


state 216

    (100) read_statement -> SCAN ( ID ) . SEMICOLON

    SEMICOLON       shift and go to state 226


state 217

    (118) setp -> SETP ( superexpression COMMA . superexpression )
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 227
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 218

    (85) loophead -> WHILE ( seen_while_LPAR superexpression . seen_while_exp )
    (90) seen_while_exp -> .

    )               reduce using rule 90 (seen_while_exp -> .)

    seen_while_exp                 shift and go to state 228

state 219

    (101) print_statement -> PRINT ( superexpression ) . SEMICOLON

    SEMICOLON       shift and go to state 229


state 220

    (81) more_args -> COMMA arg .

    )               reduce using rule 81 (more_args -> COMMA arg .)


state 221

    (34) id_or_array -> LSQUARE seen_LSQUARE superexpression RSQUARE . seen_RSQUARE = superexpression
    (74) seen_RSQUARE -> .

    =               reduce using rule 74 (seen_RSQUARE -> .)

    seen_RSQUARE                   shift and go to state 230

state 222

    (114) arc -> ARC ( superexpression COMMA superexpression . )

    )               shift and go to state 231


state 223

    (119) pcolor -> PCOLOR ( superexpression COMMA superexpression . COMMA superexpression )

    COMMA           shift and go to state 232


state 224

    (92) if_statement -> IF ( superexpression ) seen_condition . block_statement seen_condition_block if_statement2
    (97) block_statement -> . LBRACKET block_statement2 RBRACKET

    LBRACKET        shift and go to state 101

    block_statement                shift and go to state 233

state 225

    (84) loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON . superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 )
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 234
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 226

    (100) read_statement -> SCAN ( ID ) SEMICOLON .

    ID              reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    IF              reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    RETURN          reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    PRINT           reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    SCAN            reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    INT             reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    DOUBLE          reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    STRING          reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    VOID            reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    FOR             reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    WHILE           reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    MOVE            reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    ROTATE          reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    ARC             reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    HOME            reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    PDOWN           reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    PUP             reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    SETP            reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    PCOLOR          reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    PSIZE           reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    PCLEAR          reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    (               reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    CSTDOUBLE       reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    CSTINT          reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    CSTSTRING       reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)
    RBRACKET        reduce using rule 100 (read_statement -> SCAN ( ID ) SEMICOLON .)


state 227

    (118) setp -> SETP ( superexpression COMMA superexpression . )

    )               shift and go to state 235


state 228

    (85) loophead -> WHILE ( seen_while_LPAR superexpression seen_while_exp . )

    )               shift and go to state 236


state 229

    (101) print_statement -> PRINT ( superexpression ) SEMICOLON .

    ID              reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    IF              reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    RETURN          reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    PRINT           reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    SCAN            reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    INT             reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    DOUBLE          reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    STRING          reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    VOID            reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    FOR             reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    WHILE           reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    MOVE            reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    ROTATE          reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    ARC             reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    HOME            reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    PDOWN           reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    PUP             reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    SETP            reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    PCOLOR          reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    PSIZE           reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    PCLEAR          reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    (               reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    CSTDOUBLE       reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    CSTINT          reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    CSTSTRING       reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    RBRACKET        reduce using rule 101 (print_statement -> PRINT ( superexpression ) SEMICOLON .)


state 230

    (34) id_or_array -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE . = superexpression

    =               shift and go to state 237


state 231

    (114) arc -> ARC ( superexpression COMMA superexpression ) .

    SEMICOLON       reduce using rule 114 (arc -> ARC ( superexpression COMMA superexpression ) .)


state 232

    (119) pcolor -> PCOLOR ( superexpression COMMA superexpression COMMA . superexpression )
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 238
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 233

    (92) if_statement -> IF ( superexpression ) seen_condition block_statement . seen_condition_block if_statement2
    (94) seen_condition_block -> .

    ELSE            reduce using rule 94 (seen_condition_block -> .)
    ID              reduce using rule 94 (seen_condition_block -> .)
    IF              reduce using rule 94 (seen_condition_block -> .)
    RETURN          reduce using rule 94 (seen_condition_block -> .)
    PRINT           reduce using rule 94 (seen_condition_block -> .)
    SCAN            reduce using rule 94 (seen_condition_block -> .)
    INT             reduce using rule 94 (seen_condition_block -> .)
    DOUBLE          reduce using rule 94 (seen_condition_block -> .)
    STRING          reduce using rule 94 (seen_condition_block -> .)
    VOID            reduce using rule 94 (seen_condition_block -> .)
    FOR             reduce using rule 94 (seen_condition_block -> .)
    WHILE           reduce using rule 94 (seen_condition_block -> .)
    MOVE            reduce using rule 94 (seen_condition_block -> .)
    ROTATE          reduce using rule 94 (seen_condition_block -> .)
    ARC             reduce using rule 94 (seen_condition_block -> .)
    HOME            reduce using rule 94 (seen_condition_block -> .)
    PDOWN           reduce using rule 94 (seen_condition_block -> .)
    PUP             reduce using rule 94 (seen_condition_block -> .)
    SETP            reduce using rule 94 (seen_condition_block -> .)
    PCOLOR          reduce using rule 94 (seen_condition_block -> .)
    PSIZE           reduce using rule 94 (seen_condition_block -> .)
    PCLEAR          reduce using rule 94 (seen_condition_block -> .)
    (               reduce using rule 94 (seen_condition_block -> .)
    CSTDOUBLE       reduce using rule 94 (seen_condition_block -> .)
    CSTINT          reduce using rule 94 (seen_condition_block -> .)
    CSTSTRING       reduce using rule 94 (seen_condition_block -> .)
    RBRACKET        reduce using rule 94 (seen_condition_block -> .)

    seen_condition_block           shift and go to state 239

state 234

    (84) loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression . seen_for_exp SEMICOLON variable_assignment seen_assignment2 )
    (87) seen_for_exp -> .

    SEMICOLON       reduce using rule 87 (seen_for_exp -> .)

    seen_for_exp                   shift and go to state 240

state 235

    (118) setp -> SETP ( superexpression COMMA superexpression ) .

    SEMICOLON       reduce using rule 118 (setp -> SETP ( superexpression COMMA superexpression ) .)


state 236

    (85) loophead -> WHILE ( seen_while_LPAR superexpression seen_while_exp ) .

    LBRACKET        reduce using rule 85 (loophead -> WHILE ( seen_while_LPAR superexpression seen_while_exp ) .)


state 237

    (34) id_or_array -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE = . superexpression
    (35) superexpression -> . expression superexpression2
    (40) expression -> . numeric_expression compare
    (50) numeric_expression -> . term seen_term numeric_expression2
    (56) term -> . factor term2
    (61) factor -> . cst_expression
    (62) factor -> . ( seen_lpar superexpression ) seen_rpar
    (65) cst_expression -> . CSTDOUBLE
    (66) cst_expression -> . CSTINT
    (67) cst_expression -> . CSTSTRING
    (68) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 39
    CSTDOUBLE       shift and go to state 47
    CSTINT          shift and go to state 43
    CSTSTRING       shift and go to state 41
    ID              shift and go to state 40

    cst_expression                 shift and go to state 38
    numeric_expression             shift and go to state 44
    superexpression                shift and go to state 241
    term                           shift and go to state 48
    factor                         shift and go to state 46
    expression                     shift and go to state 42

state 238

    (119) pcolor -> PCOLOR ( superexpression COMMA superexpression COMMA superexpression . )

    )               shift and go to state 242


state 239

    (92) if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block . if_statement2
    (95) if_statement2 -> . ELSE block_statement
    (96) if_statement2 -> . empty
    (132) empty -> .

    ELSE            shift and go to state 245
    ID              reduce using rule 132 (empty -> .)
    IF              reduce using rule 132 (empty -> .)
    RETURN          reduce using rule 132 (empty -> .)
    PRINT           reduce using rule 132 (empty -> .)
    SCAN            reduce using rule 132 (empty -> .)
    INT             reduce using rule 132 (empty -> .)
    DOUBLE          reduce using rule 132 (empty -> .)
    STRING          reduce using rule 132 (empty -> .)
    VOID            reduce using rule 132 (empty -> .)
    FOR             reduce using rule 132 (empty -> .)
    WHILE           reduce using rule 132 (empty -> .)
    MOVE            reduce using rule 132 (empty -> .)
    ROTATE          reduce using rule 132 (empty -> .)
    ARC             reduce using rule 132 (empty -> .)
    HOME            reduce using rule 132 (empty -> .)
    PDOWN           reduce using rule 132 (empty -> .)
    PUP             reduce using rule 132 (empty -> .)
    SETP            reduce using rule 132 (empty -> .)
    PCOLOR          reduce using rule 132 (empty -> .)
    PSIZE           reduce using rule 132 (empty -> .)
    PCLEAR          reduce using rule 132 (empty -> .)
    (               reduce using rule 132 (empty -> .)
    CSTDOUBLE       reduce using rule 132 (empty -> .)
    CSTINT          reduce using rule 132 (empty -> .)
    CSTSTRING       reduce using rule 132 (empty -> .)
    RBRACKET        reduce using rule 132 (empty -> .)

    empty                          shift and go to state 243
    if_statement2                  shift and go to state 244

state 240

    (84) loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp . SEMICOLON variable_assignment seen_assignment2 )

    SEMICOLON       shift and go to state 246


state 241

    (34) id_or_array -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE = superexpression .

    SEMICOLON       reduce using rule 34 (id_or_array -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE = superexpression .)
    )               reduce using rule 34 (id_or_array -> LSQUARE seen_LSQUARE superexpression RSQUARE seen_RSQUARE = superexpression .)


state 242

    (119) pcolor -> PCOLOR ( superexpression COMMA superexpression COMMA superexpression ) .

    SEMICOLON       reduce using rule 119 (pcolor -> PCOLOR ( superexpression COMMA superexpression COMMA superexpression ) .)


state 243

    (96) if_statement2 -> empty .

    ID              reduce using rule 96 (if_statement2 -> empty .)
    IF              reduce using rule 96 (if_statement2 -> empty .)
    RETURN          reduce using rule 96 (if_statement2 -> empty .)
    PRINT           reduce using rule 96 (if_statement2 -> empty .)
    SCAN            reduce using rule 96 (if_statement2 -> empty .)
    INT             reduce using rule 96 (if_statement2 -> empty .)
    DOUBLE          reduce using rule 96 (if_statement2 -> empty .)
    STRING          reduce using rule 96 (if_statement2 -> empty .)
    VOID            reduce using rule 96 (if_statement2 -> empty .)
    FOR             reduce using rule 96 (if_statement2 -> empty .)
    WHILE           reduce using rule 96 (if_statement2 -> empty .)
    MOVE            reduce using rule 96 (if_statement2 -> empty .)
    ROTATE          reduce using rule 96 (if_statement2 -> empty .)
    ARC             reduce using rule 96 (if_statement2 -> empty .)
    HOME            reduce using rule 96 (if_statement2 -> empty .)
    PDOWN           reduce using rule 96 (if_statement2 -> empty .)
    PUP             reduce using rule 96 (if_statement2 -> empty .)
    SETP            reduce using rule 96 (if_statement2 -> empty .)
    PCOLOR          reduce using rule 96 (if_statement2 -> empty .)
    PSIZE           reduce using rule 96 (if_statement2 -> empty .)
    PCLEAR          reduce using rule 96 (if_statement2 -> empty .)
    (               reduce using rule 96 (if_statement2 -> empty .)
    CSTDOUBLE       reduce using rule 96 (if_statement2 -> empty .)
    CSTINT          reduce using rule 96 (if_statement2 -> empty .)
    CSTSTRING       reduce using rule 96 (if_statement2 -> empty .)
    RBRACKET        reduce using rule 96 (if_statement2 -> empty .)


state 244

    (92) if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .

    ID              reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    IF              reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    RETURN          reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    PRINT           reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    SCAN            reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    INT             reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    DOUBLE          reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    STRING          reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    VOID            reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    FOR             reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    WHILE           reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    MOVE            reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    ROTATE          reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    ARC             reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    HOME            reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    PDOWN           reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    PUP             reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    SETP            reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    PCOLOR          reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    PSIZE           reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    PCLEAR          reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    (               reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    CSTDOUBLE       reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    CSTINT          reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    CSTSTRING       reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    RBRACKET        reduce using rule 92 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)


state 245

    (95) if_statement2 -> ELSE . block_statement
    (97) block_statement -> . LBRACKET block_statement2 RBRACKET

    LBRACKET        shift and go to state 101

    block_statement                shift and go to state 247

state 246

    (84) loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON . variable_assignment seen_assignment2 )
    (32) variable_assignment -> . ID id_or_array

    ID              shift and go to state 195

    variable_assignment            shift and go to state 248

state 247

    (95) if_statement2 -> ELSE block_statement .

    ID              reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    IF              reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    RETURN          reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    PRINT           reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    SCAN            reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    INT             reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    DOUBLE          reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    STRING          reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    VOID            reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    FOR             reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    WHILE           reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    MOVE            reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    ROTATE          reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    ARC             reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    HOME            reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    PDOWN           reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    PUP             reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    SETP            reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    PCOLOR          reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    PSIZE           reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    PCLEAR          reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    (               reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    CSTDOUBLE       reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    CSTINT          reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    CSTSTRING       reduce using rule 95 (if_statement2 -> ELSE block_statement .)
    RBRACKET        reduce using rule 95 (if_statement2 -> ELSE block_statement .)


state 248

    (84) loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment . seen_assignment2 )
    (88) seen_assignment2 -> .

    )               reduce using rule 88 (seen_assignment2 -> .)

    seen_assignment2               shift and go to state 249

state 249

    (84) loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 . )

    )               shift and go to state 250


state 250

    (84) loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 ) .

    LBRACKET        reduce using rule 84 (loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LSQUARE in state 115 resolved as shift
