Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program2 program3 main_ahead main_method
Rule 2     main_ahead -> <empty>
Rule 3     program2 -> variable_declaration program2
Rule 4     program2 -> empty
Rule 5     program3 -> method_declaration program3
Rule 6     program3 -> empty
Rule 7     variable_declaration -> type variable_declaration2
Rule 8     variable_declaration2 -> variable_declarator variable_declaration3
Rule 9     variable_declaration3 -> COMMA variable_declaration2
Rule 10    variable_declaration3 -> SEMICOLON
Rule 11    variable_declarator -> ID seen_id variable_declarator2 variable_declarator3
Rule 12    seen_id -> <empty>
Rule 13    variable_declarator2 -> LSQUARE CSTINT RSQUARE
Rule 14    variable_declarator2 -> empty
Rule 15    variable_declarator3 -> = superexpression
Rule 16    variable_declarator3 -> empty
Rule 17    method_declaration -> FUNC type ID seen_function_id ( method_declaration2 method_declaration3
Rule 18    seen_function_id -> <empty>
Rule 19    method_declaration2 -> parameter_list
Rule 20    method_declaration2 -> empty
Rule 21    method_declaration3 -> ) seen_method_start block_statement
Rule 22    seen_method_start -> <empty>
Rule 23    parameter_list -> parameter parameter_list2
Rule 24    parameter_list2 -> COMMA parameter_list
Rule 25    parameter_list2 -> empty
Rule 26    parameter -> type ID
Rule 27    main_method -> MAIN CHEESE ( ) block_statement
Rule 28    type -> INT
Rule 29    type -> DOUBLE
Rule 30    type -> STRING
Rule 31    type -> VOID
Rule 32    variable_assignment -> ID = superexpression
Rule 33    superexpression -> expression superexpression2
Rule 34    superexpression2 -> andor superexpression
Rule 35    superexpression2 -> empty
Rule 36    andor -> AND
Rule 37    andor -> OR
Rule 38    expression -> numeric_expression compare
Rule 39    compare -> compare_symbols numeric_expression seen_comp
Rule 40    compare -> empty
Rule 41    compare_symbols -> CEQ
Rule 42    compare_symbols -> CGT
Rule 43    compare_symbols -> CGE
Rule 44    compare_symbols -> CLT
Rule 45    compare_symbols -> CLE
Rule 46    compare_symbols -> CNE
Rule 47    seen_comp -> <empty>
Rule 48    numeric_expression -> term seen_term numeric_expression2
Rule 49    seen_term -> <empty>
Rule 50    numeric_expression2 -> arithOp numeric_expression
Rule 51    numeric_expression2 -> empty
Rule 52    arithOp -> +
Rule 53    arithOp -> -
Rule 54    term -> factor term2
Rule 55    term2 -> geomOp term
Rule 56    term2 -> empty
Rule 57    geomOp -> *
Rule 58    geomOp -> /
Rule 59    factor -> cst_expression
Rule 60    factor -> ( seen_lpar superexpression ) seen_rpar
Rule 61    seen_lpar -> <empty>
Rule 62    seen_rpar -> <empty>
Rule 63    cst_expression -> CSTDOUBLE
Rule 64    cst_expression -> CSTINT
Rule 65    cst_expression -> CSTSTRING
Rule 66    cst_expression -> ID seen_id_or_func cst_expression2
Rule 67    seen_id_or_func -> <empty>
Rule 68    cst_expression2 -> LSQUARE superexpression RSQUARE
Rule 69    cst_expression2 -> function_call
Rule 70    cst_expression2 -> empty
Rule 71    function_call -> seen_func_id ( args )
Rule 72    seen_func_id -> <empty>
Rule 73    args -> arg
Rule 74    args -> empty
Rule 75    arg -> numeric_expression seen_arg more_args
Rule 76    seen_arg -> <empty>
Rule 77    more_args -> COMMA arg
Rule 78    more_args -> empty
Rule 79    loop_statement -> loophead block_statement seen_loop_block
Rule 80    loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 )
Rule 81    loophead -> WHILE ( seen_while_LPAR superexpression seen_while_exp )
Rule 82    seen_assignment1 -> <empty>
Rule 83    seen_for_exp -> <empty>
Rule 84    seen_assignment2 -> <empty>
Rule 85    seen_while_LPAR -> <empty>
Rule 86    seen_while_exp -> <empty>
Rule 87    seen_loop_block -> <empty>
Rule 88    if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2
Rule 89    seen_condition -> <empty>
Rule 90    seen_condition_block -> <empty>
Rule 91    if_statement2 -> ELSE block_statement
Rule 92    if_statement2 -> empty
Rule 93    block_statement -> LBRACKET block_statement2 RBRACKET
Rule 94    block_statement2 -> statement block_statement2
Rule 95    block_statement2 -> empty
Rule 96    read_statement -> SCAN ( ID ) SEMICOLON
Rule 97    print_statement -> PRINT ( superexpression ) SEMICOLON
Rule 98    geometry_statement -> move
Rule 99    geometry_statement -> rotate
Rule 100   geometry_statement -> arc
Rule 101   geometry_statement -> home
Rule 102   geometry_statement -> pdown
Rule 103   geometry_statement -> pup
Rule 104   geometry_statement -> setp
Rule 105   geometry_statement -> pcolor
Rule 106   geometry_statement -> psize
Rule 107   geometry_statement -> pclear
Rule 108   move -> MOVE ( superexpression )
Rule 109   rotate -> ROTATE ( superexpression )
Rule 110   arc -> ARC ( superexpression COMMA superexpression )
Rule 111   home -> HOME ( )
Rule 112   pdown -> PDOWN ( )
Rule 113   pup -> PUP ( )
Rule 114   setp -> SETP ( superexpression COMMA superexpression )
Rule 115   pcolor -> PCOLOR ( superexpression COMMA superexpression COMMA superexpression )
Rule 116   psize -> PSIZE ( superexpression )
Rule 117   pclear -> PCLEAR ( )
Rule 118   statement -> variable_declaration
Rule 119   statement -> variable_assignment SEMICOLON
Rule 120   statement -> superexpression SEMICOLON
Rule 121   statement -> if_statement
Rule 122   statement -> loop_statement
Rule 123   statement -> return
Rule 124   statement -> print_statement
Rule 125   statement -> read_statement
Rule 126   statement -> geometry_statement SEMICOLON
Rule 127   return -> RETURN superexpression SEMICOLON
Rule 128   empty -> <empty>

Terminals, with rules where they appear

(                    : 17 27 60 71 80 81 88 96 97 108 109 110 111 112 113 114 115 116 117
)                    : 21 27 60 71 80 81 88 96 97 108 109 110 111 112 113 114 115 116 117
*                    : 57
+                    : 52
-                    : 53
/                    : 58
=                    : 15 32
AND                  : 36
ARC                  : 110
CEQ                  : 41
CGE                  : 43
CGT                  : 42
CHEESE               : 27
CLE                  : 45
CLT                  : 44
CNE                  : 46
COMMA                : 9 24 77 110 114 115 115
CSTDOUBLE            : 63
CSTINT               : 13 64
CSTSTRING            : 65
DOUBLE               : 29
ELSE                 : 91
FOR                  : 80
FUNC                 : 17
HOME                 : 111
ID                   : 11 17 26 32 66 96
IF                   : 88
INT                  : 28
LBRACKET             : 93
LSQUARE              : 13 68
MAIN                 : 27
MOVE                 : 108
OR                   : 37
PCLEAR               : 117
PCOLOR               : 115
PDOWN                : 112
PRINT                : 97
PSIZE                : 116
PUP                  : 113
RBRACKET             : 93
RETURN               : 127
ROTATE               : 109
RSQUARE              : 13 68
SCAN                 : 96
SEMICOLON            : 10 80 80 96 97 119 120 126 127
SETP                 : 114
STRING               : 30
VOID                 : 31
WHILE                : 81
error                : 

Nonterminals, with rules where they appear

andor                : 34
arc                  : 100
arg                  : 73 77
args                 : 71
arithOp              : 50
block_statement      : 21 27 79 88 91
block_statement2     : 93 94
compare              : 38
compare_symbols      : 39
cst_expression       : 59
cst_expression2      : 66
empty                : 4 6 14 16 20 25 35 40 51 56 70 74 78 92 95
expression           : 33
factor               : 54
function_call        : 69
geomOp               : 55
geometry_statement   : 126
home                 : 101
if_statement         : 121
if_statement2        : 88
loop_statement       : 122
loophead             : 79
main_ahead           : 1
main_method          : 1
method_declaration   : 5
method_declaration2  : 17
method_declaration3  : 17
more_args            : 75
move                 : 98
numeric_expression   : 38 39 50 75
numeric_expression2  : 48
parameter            : 23
parameter_list       : 19 24
parameter_list2      : 23
pclear               : 107
pcolor               : 105
pdown                : 102
print_statement      : 124
program              : 0
program2             : 1 3
program3             : 1 5
psize                : 106
pup                  : 103
read_statement       : 125
return               : 123
rotate               : 99
seen_arg             : 75
seen_assignment1     : 80
seen_assignment2     : 80
seen_comp            : 39
seen_condition       : 88
seen_condition_block : 88
seen_for_exp         : 80
seen_func_id         : 71
seen_function_id     : 17
seen_id              : 11
seen_id_or_func      : 66
seen_loop_block      : 79
seen_lpar            : 60
seen_method_start    : 21
seen_rpar            : 60
seen_term            : 48
seen_while_LPAR      : 81
seen_while_exp       : 81
setp                 : 104
statement            : 94
superexpression      : 15 32 34 60 68 80 81 88 97 108 109 110 110 114 114 115 115 115 116 120 127
superexpression2     : 33
term                 : 48 55
term2                : 54
type                 : 7 17 26
variable_assignment  : 80 80 119
variable_declaration : 3 118
variable_declaration2 : 7 9
variable_declaration3 : 8
variable_declarator  : 8
variable_declarator2 : 11
variable_declarator3 : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program2 program3 main_ahead main_method
    (3) program2 -> . variable_declaration program2
    (4) program2 -> . empty
    (7) variable_declaration -> . type variable_declaration2
    (128) empty -> .
    (28) type -> . INT
    (29) type -> . DOUBLE
    (30) type -> . STRING
    (31) type -> . VOID

    FUNC            reduce using rule 128 (empty -> .)
    MAIN            reduce using rule 128 (empty -> .)
    INT             shift and go to state 8
    DOUBLE          shift and go to state 9
    STRING          shift and go to state 4
    VOID            shift and go to state 7

    empty                          shift and go to state 1
    program2                       shift and go to state 5
    variable_declaration           shift and go to state 6
    program                        shift and go to state 2
    type                           shift and go to state 3

state 1

    (4) program2 -> empty .

    FUNC            reduce using rule 4 (program2 -> empty .)
    MAIN            reduce using rule 4 (program2 -> empty .)


state 2

    (0) S' -> program .



state 3

    (7) variable_declaration -> type . variable_declaration2
    (8) variable_declaration2 -> . variable_declarator variable_declaration3
    (11) variable_declarator -> . ID seen_id variable_declarator2 variable_declarator3

    ID              shift and go to state 12

    variable_declarator            shift and go to state 10
    variable_declaration2          shift and go to state 11

state 4

    (30) type -> STRING .

    ID              reduce using rule 30 (type -> STRING .)


state 5

    (1) program -> program2 . program3 main_ahead main_method
    (5) program3 -> . method_declaration program3
    (6) program3 -> . empty
    (17) method_declaration -> . FUNC type ID seen_function_id ( method_declaration2 method_declaration3
    (128) empty -> .

    FUNC            shift and go to state 16
    MAIN            reduce using rule 128 (empty -> .)

    method_declaration             shift and go to state 13
    empty                          shift and go to state 14
    program3                       shift and go to state 15

state 6

    (3) program2 -> variable_declaration . program2
    (3) program2 -> . variable_declaration program2
    (4) program2 -> . empty
    (7) variable_declaration -> . type variable_declaration2
    (128) empty -> .
    (28) type -> . INT
    (29) type -> . DOUBLE
    (30) type -> . STRING
    (31) type -> . VOID

    FUNC            reduce using rule 128 (empty -> .)
    MAIN            reduce using rule 128 (empty -> .)
    INT             shift and go to state 8
    DOUBLE          shift and go to state 9
    STRING          shift and go to state 4
    VOID            shift and go to state 7

    variable_declaration           shift and go to state 6
    empty                          shift and go to state 1
    type                           shift and go to state 3
    program2                       shift and go to state 17

state 7

    (31) type -> VOID .

    ID              reduce using rule 31 (type -> VOID .)


state 8

    (28) type -> INT .

    ID              reduce using rule 28 (type -> INT .)


state 9

    (29) type -> DOUBLE .

    ID              reduce using rule 29 (type -> DOUBLE .)


state 10

    (8) variable_declaration2 -> variable_declarator . variable_declaration3
    (9) variable_declaration3 -> . COMMA variable_declaration2
    (10) variable_declaration3 -> . SEMICOLON

    COMMA           shift and go to state 19
    SEMICOLON       shift and go to state 20

    variable_declaration3          shift and go to state 18

state 11

    (7) variable_declaration -> type variable_declaration2 .

    ID              reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    IF              reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    RETURN          reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    PRINT           reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    SCAN            reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    INT             reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    DOUBLE          reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    STRING          reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    VOID            reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    FOR             reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    WHILE           reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    MOVE            reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    ROTATE          reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    ARC             reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    HOME            reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    PDOWN           reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    PUP             reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    SETP            reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    PCOLOR          reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    PSIZE           reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    PCLEAR          reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    (               reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    CSTDOUBLE       reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    CSTINT          reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    CSTSTRING       reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    RBRACKET        reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    FUNC            reduce using rule 7 (variable_declaration -> type variable_declaration2 .)
    MAIN            reduce using rule 7 (variable_declaration -> type variable_declaration2 .)


state 12

    (11) variable_declarator -> ID . seen_id variable_declarator2 variable_declarator3
    (12) seen_id -> .

    LSQUARE         reduce using rule 12 (seen_id -> .)
    =               reduce using rule 12 (seen_id -> .)
    COMMA           reduce using rule 12 (seen_id -> .)
    SEMICOLON       reduce using rule 12 (seen_id -> .)

    seen_id                        shift and go to state 21

state 13

    (5) program3 -> method_declaration . program3
    (5) program3 -> . method_declaration program3
    (6) program3 -> . empty
    (17) method_declaration -> . FUNC type ID seen_function_id ( method_declaration2 method_declaration3
    (128) empty -> .

    FUNC            shift and go to state 16
    MAIN            reduce using rule 128 (empty -> .)

    method_declaration             shift and go to state 13
    empty                          shift and go to state 14
    program3                       shift and go to state 22

state 14

    (6) program3 -> empty .

    MAIN            reduce using rule 6 (program3 -> empty .)


state 15

    (1) program -> program2 program3 . main_ahead main_method
    (2) main_ahead -> .

    MAIN            reduce using rule 2 (main_ahead -> .)

    main_ahead                     shift and go to state 23

state 16

    (17) method_declaration -> FUNC . type ID seen_function_id ( method_declaration2 method_declaration3
    (28) type -> . INT
    (29) type -> . DOUBLE
    (30) type -> . STRING
    (31) type -> . VOID

    INT             shift and go to state 8
    DOUBLE          shift and go to state 9
    STRING          shift and go to state 4
    VOID            shift and go to state 7

    type                           shift and go to state 24

state 17

    (3) program2 -> variable_declaration program2 .

    FUNC            reduce using rule 3 (program2 -> variable_declaration program2 .)
    MAIN            reduce using rule 3 (program2 -> variable_declaration program2 .)


state 18

    (8) variable_declaration2 -> variable_declarator variable_declaration3 .

    INT             reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    DOUBLE          reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    STRING          reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    VOID            reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    FUNC            reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    MAIN            reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    ID              reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    IF              reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    RETURN          reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    PRINT           reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    SCAN            reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    FOR             reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    WHILE           reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    MOVE            reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    ROTATE          reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    ARC             reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    HOME            reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    PDOWN           reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    PUP             reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    SETP            reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    PCOLOR          reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    PSIZE           reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    PCLEAR          reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    (               reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    CSTDOUBLE       reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    CSTINT          reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    CSTSTRING       reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)
    RBRACKET        reduce using rule 8 (variable_declaration2 -> variable_declarator variable_declaration3 .)


state 19

    (9) variable_declaration3 -> COMMA . variable_declaration2
    (8) variable_declaration2 -> . variable_declarator variable_declaration3
    (11) variable_declarator -> . ID seen_id variable_declarator2 variable_declarator3

    ID              shift and go to state 12

    variable_declarator            shift and go to state 10
    variable_declaration2          shift and go to state 25

state 20

    (10) variable_declaration3 -> SEMICOLON .

    INT             reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    DOUBLE          reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    STRING          reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    VOID            reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    FUNC            reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    MAIN            reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    ID              reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    IF              reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    RETURN          reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    PRINT           reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    SCAN            reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    FOR             reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    WHILE           reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    MOVE            reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    ROTATE          reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    ARC             reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    HOME            reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    PDOWN           reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    PUP             reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    SETP            reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    PCOLOR          reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    PSIZE           reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    PCLEAR          reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    (               reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    CSTDOUBLE       reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    CSTINT          reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    CSTSTRING       reduce using rule 10 (variable_declaration3 -> SEMICOLON .)
    RBRACKET        reduce using rule 10 (variable_declaration3 -> SEMICOLON .)


state 21

    (11) variable_declarator -> ID seen_id . variable_declarator2 variable_declarator3
    (13) variable_declarator2 -> . LSQUARE CSTINT RSQUARE
    (14) variable_declarator2 -> . empty
    (128) empty -> .

    LSQUARE         shift and go to state 27
    =               reduce using rule 128 (empty -> .)
    COMMA           reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)

    empty                          shift and go to state 26
    variable_declarator2           shift and go to state 28

state 22

    (5) program3 -> method_declaration program3 .

    MAIN            reduce using rule 5 (program3 -> method_declaration program3 .)


state 23

    (1) program -> program2 program3 main_ahead . main_method
    (27) main_method -> . MAIN CHEESE ( ) block_statement

    MAIN            shift and go to state 29

    main_method                    shift and go to state 30

state 24

    (17) method_declaration -> FUNC type . ID seen_function_id ( method_declaration2 method_declaration3

    ID              shift and go to state 31


state 25

    (9) variable_declaration3 -> COMMA variable_declaration2 .

    INT             reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    DOUBLE          reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    STRING          reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    VOID            reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    FUNC            reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    MAIN            reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    ID              reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    IF              reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    RETURN          reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    PRINT           reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    SCAN            reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    FOR             reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    WHILE           reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    MOVE            reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    ROTATE          reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    ARC             reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    HOME            reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    PDOWN           reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    PUP             reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    SETP            reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    PCOLOR          reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    PSIZE           reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    PCLEAR          reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    (               reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    CSTDOUBLE       reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    CSTINT          reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    CSTSTRING       reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)
    RBRACKET        reduce using rule 9 (variable_declaration3 -> COMMA variable_declaration2 .)


state 26

    (14) variable_declarator2 -> empty .

    =               reduce using rule 14 (variable_declarator2 -> empty .)
    COMMA           reduce using rule 14 (variable_declarator2 -> empty .)
    SEMICOLON       reduce using rule 14 (variable_declarator2 -> empty .)


state 27

    (13) variable_declarator2 -> LSQUARE . CSTINT RSQUARE

    CSTINT          shift and go to state 32


state 28

    (11) variable_declarator -> ID seen_id variable_declarator2 . variable_declarator3
    (15) variable_declarator3 -> . = superexpression
    (16) variable_declarator3 -> . empty
    (128) empty -> .

    =               shift and go to state 35
    COMMA           reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)

    variable_declarator3           shift and go to state 33
    empty                          shift and go to state 34

state 29

    (27) main_method -> MAIN . CHEESE ( ) block_statement

    CHEESE          shift and go to state 36


state 30

    (1) program -> program2 program3 main_ahead main_method .

    $end            reduce using rule 1 (program -> program2 program3 main_ahead main_method .)


state 31

    (17) method_declaration -> FUNC type ID . seen_function_id ( method_declaration2 method_declaration3
    (18) seen_function_id -> .

    (               reduce using rule 18 (seen_function_id -> .)

    seen_function_id               shift and go to state 37

state 32

    (13) variable_declarator2 -> LSQUARE CSTINT . RSQUARE

    RSQUARE         shift and go to state 38


state 33

    (11) variable_declarator -> ID seen_id variable_declarator2 variable_declarator3 .

    COMMA           reduce using rule 11 (variable_declarator -> ID seen_id variable_declarator2 variable_declarator3 .)
    SEMICOLON       reduce using rule 11 (variable_declarator -> ID seen_id variable_declarator2 variable_declarator3 .)


state 34

    (16) variable_declarator3 -> empty .

    COMMA           reduce using rule 16 (variable_declarator3 -> empty .)
    SEMICOLON       reduce using rule 16 (variable_declarator3 -> empty .)


state 35

    (15) variable_declarator3 -> = . superexpression
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 47
    term                           shift and go to state 49

state 36

    (27) main_method -> MAIN CHEESE . ( ) block_statement

    (               shift and go to state 50


state 37

    (17) method_declaration -> FUNC type ID seen_function_id . ( method_declaration2 method_declaration3

    (               shift and go to state 51


state 38

    (13) variable_declarator2 -> LSQUARE CSTINT RSQUARE .

    =               reduce using rule 13 (variable_declarator2 -> LSQUARE CSTINT RSQUARE .)
    COMMA           reduce using rule 13 (variable_declarator2 -> LSQUARE CSTINT RSQUARE .)
    SEMICOLON       reduce using rule 13 (variable_declarator2 -> LSQUARE CSTINT RSQUARE .)


state 39

    (59) factor -> cst_expression .

    *               reduce using rule 59 (factor -> cst_expression .)
    /               reduce using rule 59 (factor -> cst_expression .)
    +               reduce using rule 59 (factor -> cst_expression .)
    -               reduce using rule 59 (factor -> cst_expression .)
    CEQ             reduce using rule 59 (factor -> cst_expression .)
    CGT             reduce using rule 59 (factor -> cst_expression .)
    CGE             reduce using rule 59 (factor -> cst_expression .)
    CLT             reduce using rule 59 (factor -> cst_expression .)
    CLE             reduce using rule 59 (factor -> cst_expression .)
    CNE             reduce using rule 59 (factor -> cst_expression .)
    AND             reduce using rule 59 (factor -> cst_expression .)
    OR              reduce using rule 59 (factor -> cst_expression .)
    )               reduce using rule 59 (factor -> cst_expression .)
    COMMA           reduce using rule 59 (factor -> cst_expression .)
    SEMICOLON       reduce using rule 59 (factor -> cst_expression .)
    RSQUARE         reduce using rule 59 (factor -> cst_expression .)


state 40

    (60) factor -> ( . seen_lpar superexpression ) seen_rpar
    (61) seen_lpar -> .

    (               reduce using rule 61 (seen_lpar -> .)
    CSTDOUBLE       reduce using rule 61 (seen_lpar -> .)
    CSTINT          reduce using rule 61 (seen_lpar -> .)
    CSTSTRING       reduce using rule 61 (seen_lpar -> .)
    ID              reduce using rule 61 (seen_lpar -> .)

    seen_lpar                      shift and go to state 52

state 41

    (38) expression -> numeric_expression . compare
    (39) compare -> . compare_symbols numeric_expression seen_comp
    (40) compare -> . empty
    (41) compare_symbols -> . CEQ
    (42) compare_symbols -> . CGT
    (43) compare_symbols -> . CGE
    (44) compare_symbols -> . CLT
    (45) compare_symbols -> . CLE
    (46) compare_symbols -> . CNE
    (128) empty -> .

    CEQ             shift and go to state 61
    CGT             shift and go to state 60
    CGE             shift and go to state 58
    CLT             shift and go to state 59
    CLE             shift and go to state 53
    CNE             shift and go to state 57
    AND             reduce using rule 128 (empty -> .)
    OR              reduce using rule 128 (empty -> .)
    COMMA           reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    )               reduce using rule 128 (empty -> .)
    RSQUARE         reduce using rule 128 (empty -> .)

    compare                        shift and go to state 54
    empty                          shift and go to state 55
    compare_symbols                shift and go to state 56

state 42

    (33) superexpression -> expression . superexpression2
    (34) superexpression2 -> . andor superexpression
    (35) superexpression2 -> . empty
    (36) andor -> . AND
    (37) andor -> . OR
    (128) empty -> .

    AND             shift and go to state 64
    OR              shift and go to state 66
    COMMA           reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    )               reduce using rule 128 (empty -> .)
    RSQUARE         reduce using rule 128 (empty -> .)

    andor                          shift and go to state 62
    superexpression2               shift and go to state 65
    empty                          shift and go to state 63

state 43

    (63) cst_expression -> CSTDOUBLE .

    *               reduce using rule 63 (cst_expression -> CSTDOUBLE .)
    /               reduce using rule 63 (cst_expression -> CSTDOUBLE .)
    +               reduce using rule 63 (cst_expression -> CSTDOUBLE .)
    -               reduce using rule 63 (cst_expression -> CSTDOUBLE .)
    CEQ             reduce using rule 63 (cst_expression -> CSTDOUBLE .)
    CGT             reduce using rule 63 (cst_expression -> CSTDOUBLE .)
    CGE             reduce using rule 63 (cst_expression -> CSTDOUBLE .)
    CLT             reduce using rule 63 (cst_expression -> CSTDOUBLE .)
    CLE             reduce using rule 63 (cst_expression -> CSTDOUBLE .)
    CNE             reduce using rule 63 (cst_expression -> CSTDOUBLE .)
    AND             reduce using rule 63 (cst_expression -> CSTDOUBLE .)
    OR              reduce using rule 63 (cst_expression -> CSTDOUBLE .)
    )               reduce using rule 63 (cst_expression -> CSTDOUBLE .)
    SEMICOLON       reduce using rule 63 (cst_expression -> CSTDOUBLE .)
    COMMA           reduce using rule 63 (cst_expression -> CSTDOUBLE .)
    RSQUARE         reduce using rule 63 (cst_expression -> CSTDOUBLE .)


state 44

    (64) cst_expression -> CSTINT .

    *               reduce using rule 64 (cst_expression -> CSTINT .)
    /               reduce using rule 64 (cst_expression -> CSTINT .)
    +               reduce using rule 64 (cst_expression -> CSTINT .)
    -               reduce using rule 64 (cst_expression -> CSTINT .)
    CEQ             reduce using rule 64 (cst_expression -> CSTINT .)
    CGT             reduce using rule 64 (cst_expression -> CSTINT .)
    CGE             reduce using rule 64 (cst_expression -> CSTINT .)
    CLT             reduce using rule 64 (cst_expression -> CSTINT .)
    CLE             reduce using rule 64 (cst_expression -> CSTINT .)
    CNE             reduce using rule 64 (cst_expression -> CSTINT .)
    AND             reduce using rule 64 (cst_expression -> CSTINT .)
    OR              reduce using rule 64 (cst_expression -> CSTINT .)
    )               reduce using rule 64 (cst_expression -> CSTINT .)
    SEMICOLON       reduce using rule 64 (cst_expression -> CSTINT .)
    COMMA           reduce using rule 64 (cst_expression -> CSTINT .)
    RSQUARE         reduce using rule 64 (cst_expression -> CSTINT .)


state 45

    (54) term -> factor . term2
    (55) term2 -> . geomOp term
    (56) term2 -> . empty
    (57) geomOp -> . *
    (58) geomOp -> . /
    (128) empty -> .

    *               shift and go to state 69
    /               shift and go to state 71
    +               reduce using rule 128 (empty -> .)
    -               reduce using rule 128 (empty -> .)
    CEQ             reduce using rule 128 (empty -> .)
    CGT             reduce using rule 128 (empty -> .)
    CGE             reduce using rule 128 (empty -> .)
    CLT             reduce using rule 128 (empty -> .)
    CLE             reduce using rule 128 (empty -> .)
    CNE             reduce using rule 128 (empty -> .)
    AND             reduce using rule 128 (empty -> .)
    OR              reduce using rule 128 (empty -> .)
    COMMA           reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    )               reduce using rule 128 (empty -> .)
    RSQUARE         reduce using rule 128 (empty -> .)

    geomOp                         shift and go to state 67
    term2                          shift and go to state 70
    empty                          shift and go to state 68

state 46

    (65) cst_expression -> CSTSTRING .

    *               reduce using rule 65 (cst_expression -> CSTSTRING .)
    /               reduce using rule 65 (cst_expression -> CSTSTRING .)
    +               reduce using rule 65 (cst_expression -> CSTSTRING .)
    -               reduce using rule 65 (cst_expression -> CSTSTRING .)
    CEQ             reduce using rule 65 (cst_expression -> CSTSTRING .)
    CGT             reduce using rule 65 (cst_expression -> CSTSTRING .)
    CGE             reduce using rule 65 (cst_expression -> CSTSTRING .)
    CLT             reduce using rule 65 (cst_expression -> CSTSTRING .)
    CLE             reduce using rule 65 (cst_expression -> CSTSTRING .)
    CNE             reduce using rule 65 (cst_expression -> CSTSTRING .)
    AND             reduce using rule 65 (cst_expression -> CSTSTRING .)
    OR              reduce using rule 65 (cst_expression -> CSTSTRING .)
    )               reduce using rule 65 (cst_expression -> CSTSTRING .)
    SEMICOLON       reduce using rule 65 (cst_expression -> CSTSTRING .)
    COMMA           reduce using rule 65 (cst_expression -> CSTSTRING .)
    RSQUARE         reduce using rule 65 (cst_expression -> CSTSTRING .)


state 47

    (15) variable_declarator3 -> = superexpression .

    COMMA           reduce using rule 15 (variable_declarator3 -> = superexpression .)
    SEMICOLON       reduce using rule 15 (variable_declarator3 -> = superexpression .)


state 48

    (66) cst_expression -> ID . seen_id_or_func cst_expression2
    (67) seen_id_or_func -> .

    LSQUARE         reduce using rule 67 (seen_id_or_func -> .)
    (               reduce using rule 67 (seen_id_or_func -> .)
    *               reduce using rule 67 (seen_id_or_func -> .)
    /               reduce using rule 67 (seen_id_or_func -> .)
    +               reduce using rule 67 (seen_id_or_func -> .)
    -               reduce using rule 67 (seen_id_or_func -> .)
    CEQ             reduce using rule 67 (seen_id_or_func -> .)
    CGT             reduce using rule 67 (seen_id_or_func -> .)
    CGE             reduce using rule 67 (seen_id_or_func -> .)
    CLT             reduce using rule 67 (seen_id_or_func -> .)
    CLE             reduce using rule 67 (seen_id_or_func -> .)
    CNE             reduce using rule 67 (seen_id_or_func -> .)
    AND             reduce using rule 67 (seen_id_or_func -> .)
    OR              reduce using rule 67 (seen_id_or_func -> .)
    COMMA           reduce using rule 67 (seen_id_or_func -> .)
    SEMICOLON       reduce using rule 67 (seen_id_or_func -> .)
    )               reduce using rule 67 (seen_id_or_func -> .)
    RSQUARE         reduce using rule 67 (seen_id_or_func -> .)

    seen_id_or_func                shift and go to state 72

state 49

    (48) numeric_expression -> term . seen_term numeric_expression2
    (49) seen_term -> .

    +               reduce using rule 49 (seen_term -> .)
    -               reduce using rule 49 (seen_term -> .)
    CEQ             reduce using rule 49 (seen_term -> .)
    CGT             reduce using rule 49 (seen_term -> .)
    CGE             reduce using rule 49 (seen_term -> .)
    CLT             reduce using rule 49 (seen_term -> .)
    CLE             reduce using rule 49 (seen_term -> .)
    CNE             reduce using rule 49 (seen_term -> .)
    AND             reduce using rule 49 (seen_term -> .)
    OR              reduce using rule 49 (seen_term -> .)
    COMMA           reduce using rule 49 (seen_term -> .)
    SEMICOLON       reduce using rule 49 (seen_term -> .)
    )               reduce using rule 49 (seen_term -> .)
    RSQUARE         reduce using rule 49 (seen_term -> .)

    seen_term                      shift and go to state 73

state 50

    (27) main_method -> MAIN CHEESE ( . ) block_statement

    )               shift and go to state 74


state 51

    (17) method_declaration -> FUNC type ID seen_function_id ( . method_declaration2 method_declaration3
    (19) method_declaration2 -> . parameter_list
    (20) method_declaration2 -> . empty
    (23) parameter_list -> . parameter parameter_list2
    (128) empty -> .
    (26) parameter -> . type ID
    (28) type -> . INT
    (29) type -> . DOUBLE
    (30) type -> . STRING
    (31) type -> . VOID

    )               reduce using rule 128 (empty -> .)
    INT             shift and go to state 8
    DOUBLE          shift and go to state 9
    STRING          shift and go to state 4
    VOID            shift and go to state 7

    method_declaration2            shift and go to state 75
    parameter                      shift and go to state 76
    empty                          shift and go to state 77
    parameter_list                 shift and go to state 79
    type                           shift and go to state 78

state 52

    (60) factor -> ( seen_lpar . superexpression ) seen_rpar
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 80
    term                           shift and go to state 49

state 53

    (45) compare_symbols -> CLE .

    (               reduce using rule 45 (compare_symbols -> CLE .)
    CSTDOUBLE       reduce using rule 45 (compare_symbols -> CLE .)
    CSTINT          reduce using rule 45 (compare_symbols -> CLE .)
    CSTSTRING       reduce using rule 45 (compare_symbols -> CLE .)
    ID              reduce using rule 45 (compare_symbols -> CLE .)


state 54

    (38) expression -> numeric_expression compare .

    AND             reduce using rule 38 (expression -> numeric_expression compare .)
    OR              reduce using rule 38 (expression -> numeric_expression compare .)
    )               reduce using rule 38 (expression -> numeric_expression compare .)
    COMMA           reduce using rule 38 (expression -> numeric_expression compare .)
    SEMICOLON       reduce using rule 38 (expression -> numeric_expression compare .)
    RSQUARE         reduce using rule 38 (expression -> numeric_expression compare .)


state 55

    (40) compare -> empty .

    AND             reduce using rule 40 (compare -> empty .)
    OR              reduce using rule 40 (compare -> empty .)
    COMMA           reduce using rule 40 (compare -> empty .)
    SEMICOLON       reduce using rule 40 (compare -> empty .)
    )               reduce using rule 40 (compare -> empty .)
    RSQUARE         reduce using rule 40 (compare -> empty .)


state 56

    (39) compare -> compare_symbols . numeric_expression seen_comp
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 81
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    term                           shift and go to state 49

state 57

    (46) compare_symbols -> CNE .

    (               reduce using rule 46 (compare_symbols -> CNE .)
    CSTDOUBLE       reduce using rule 46 (compare_symbols -> CNE .)
    CSTINT          reduce using rule 46 (compare_symbols -> CNE .)
    CSTSTRING       reduce using rule 46 (compare_symbols -> CNE .)
    ID              reduce using rule 46 (compare_symbols -> CNE .)


state 58

    (43) compare_symbols -> CGE .

    (               reduce using rule 43 (compare_symbols -> CGE .)
    CSTDOUBLE       reduce using rule 43 (compare_symbols -> CGE .)
    CSTINT          reduce using rule 43 (compare_symbols -> CGE .)
    CSTSTRING       reduce using rule 43 (compare_symbols -> CGE .)
    ID              reduce using rule 43 (compare_symbols -> CGE .)


state 59

    (44) compare_symbols -> CLT .

    (               reduce using rule 44 (compare_symbols -> CLT .)
    CSTDOUBLE       reduce using rule 44 (compare_symbols -> CLT .)
    CSTINT          reduce using rule 44 (compare_symbols -> CLT .)
    CSTSTRING       reduce using rule 44 (compare_symbols -> CLT .)
    ID              reduce using rule 44 (compare_symbols -> CLT .)


state 60

    (42) compare_symbols -> CGT .

    (               reduce using rule 42 (compare_symbols -> CGT .)
    CSTDOUBLE       reduce using rule 42 (compare_symbols -> CGT .)
    CSTINT          reduce using rule 42 (compare_symbols -> CGT .)
    CSTSTRING       reduce using rule 42 (compare_symbols -> CGT .)
    ID              reduce using rule 42 (compare_symbols -> CGT .)


state 61

    (41) compare_symbols -> CEQ .

    (               reduce using rule 41 (compare_symbols -> CEQ .)
    CSTDOUBLE       reduce using rule 41 (compare_symbols -> CEQ .)
    CSTINT          reduce using rule 41 (compare_symbols -> CEQ .)
    CSTSTRING       reduce using rule 41 (compare_symbols -> CEQ .)
    ID              reduce using rule 41 (compare_symbols -> CEQ .)


state 62

    (34) superexpression2 -> andor . superexpression
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 82
    term                           shift and go to state 49

state 63

    (35) superexpression2 -> empty .

    COMMA           reduce using rule 35 (superexpression2 -> empty .)
    SEMICOLON       reduce using rule 35 (superexpression2 -> empty .)
    )               reduce using rule 35 (superexpression2 -> empty .)
    RSQUARE         reduce using rule 35 (superexpression2 -> empty .)


state 64

    (36) andor -> AND .

    (               reduce using rule 36 (andor -> AND .)
    CSTDOUBLE       reduce using rule 36 (andor -> AND .)
    CSTINT          reduce using rule 36 (andor -> AND .)
    CSTSTRING       reduce using rule 36 (andor -> AND .)
    ID              reduce using rule 36 (andor -> AND .)


state 65

    (33) superexpression -> expression superexpression2 .

    )               reduce using rule 33 (superexpression -> expression superexpression2 .)
    SEMICOLON       reduce using rule 33 (superexpression -> expression superexpression2 .)
    COMMA           reduce using rule 33 (superexpression -> expression superexpression2 .)
    RSQUARE         reduce using rule 33 (superexpression -> expression superexpression2 .)


state 66

    (37) andor -> OR .

    (               reduce using rule 37 (andor -> OR .)
    CSTDOUBLE       reduce using rule 37 (andor -> OR .)
    CSTINT          reduce using rule 37 (andor -> OR .)
    CSTSTRING       reduce using rule 37 (andor -> OR .)
    ID              reduce using rule 37 (andor -> OR .)


state 67

    (55) term2 -> geomOp . term
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    factor                         shift and go to state 45
    cst_expression                 shift and go to state 39
    term                           shift and go to state 83

state 68

    (56) term2 -> empty .

    +               reduce using rule 56 (term2 -> empty .)
    -               reduce using rule 56 (term2 -> empty .)
    CEQ             reduce using rule 56 (term2 -> empty .)
    CGT             reduce using rule 56 (term2 -> empty .)
    CGE             reduce using rule 56 (term2 -> empty .)
    CLT             reduce using rule 56 (term2 -> empty .)
    CLE             reduce using rule 56 (term2 -> empty .)
    CNE             reduce using rule 56 (term2 -> empty .)
    AND             reduce using rule 56 (term2 -> empty .)
    OR              reduce using rule 56 (term2 -> empty .)
    COMMA           reduce using rule 56 (term2 -> empty .)
    SEMICOLON       reduce using rule 56 (term2 -> empty .)
    )               reduce using rule 56 (term2 -> empty .)
    RSQUARE         reduce using rule 56 (term2 -> empty .)


state 69

    (57) geomOp -> * .

    (               reduce using rule 57 (geomOp -> * .)
    CSTDOUBLE       reduce using rule 57 (geomOp -> * .)
    CSTINT          reduce using rule 57 (geomOp -> * .)
    CSTSTRING       reduce using rule 57 (geomOp -> * .)
    ID              reduce using rule 57 (geomOp -> * .)


state 70

    (54) term -> factor term2 .

    +               reduce using rule 54 (term -> factor term2 .)
    -               reduce using rule 54 (term -> factor term2 .)
    CEQ             reduce using rule 54 (term -> factor term2 .)
    CGT             reduce using rule 54 (term -> factor term2 .)
    CGE             reduce using rule 54 (term -> factor term2 .)
    CLT             reduce using rule 54 (term -> factor term2 .)
    CLE             reduce using rule 54 (term -> factor term2 .)
    CNE             reduce using rule 54 (term -> factor term2 .)
    AND             reduce using rule 54 (term -> factor term2 .)
    OR              reduce using rule 54 (term -> factor term2 .)
    SEMICOLON       reduce using rule 54 (term -> factor term2 .)
    )               reduce using rule 54 (term -> factor term2 .)
    COMMA           reduce using rule 54 (term -> factor term2 .)
    RSQUARE         reduce using rule 54 (term -> factor term2 .)


state 71

    (58) geomOp -> / .

    (               reduce using rule 58 (geomOp -> / .)
    CSTDOUBLE       reduce using rule 58 (geomOp -> / .)
    CSTINT          reduce using rule 58 (geomOp -> / .)
    CSTSTRING       reduce using rule 58 (geomOp -> / .)
    ID              reduce using rule 58 (geomOp -> / .)


state 72

    (66) cst_expression -> ID seen_id_or_func . cst_expression2
    (68) cst_expression2 -> . LSQUARE superexpression RSQUARE
    (69) cst_expression2 -> . function_call
    (70) cst_expression2 -> . empty
    (71) function_call -> . seen_func_id ( args )
    (128) empty -> .
    (72) seen_func_id -> .

    LSQUARE         shift and go to state 85
    *               reduce using rule 128 (empty -> .)
    /               reduce using rule 128 (empty -> .)
    +               reduce using rule 128 (empty -> .)
    -               reduce using rule 128 (empty -> .)
    CEQ             reduce using rule 128 (empty -> .)
    CGT             reduce using rule 128 (empty -> .)
    CGE             reduce using rule 128 (empty -> .)
    CLT             reduce using rule 128 (empty -> .)
    CLE             reduce using rule 128 (empty -> .)
    CNE             reduce using rule 128 (empty -> .)
    AND             reduce using rule 128 (empty -> .)
    OR              reduce using rule 128 (empty -> .)
    COMMA           reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    )               reduce using rule 128 (empty -> .)
    RSQUARE         reduce using rule 128 (empty -> .)
    (               reduce using rule 72 (seen_func_id -> .)

    function_call                  shift and go to state 87
    empty                          shift and go to state 84
    cst_expression2                shift and go to state 86
    seen_func_id                   shift and go to state 88

state 73

    (48) numeric_expression -> term seen_term . numeric_expression2
    (50) numeric_expression2 -> . arithOp numeric_expression
    (51) numeric_expression2 -> . empty
    (52) arithOp -> . +
    (53) arithOp -> . -
    (128) empty -> .

    +               shift and go to state 93
    -               shift and go to state 92
    CEQ             reduce using rule 128 (empty -> .)
    CGT             reduce using rule 128 (empty -> .)
    CGE             reduce using rule 128 (empty -> .)
    CLT             reduce using rule 128 (empty -> .)
    CLE             reduce using rule 128 (empty -> .)
    CNE             reduce using rule 128 (empty -> .)
    AND             reduce using rule 128 (empty -> .)
    OR              reduce using rule 128 (empty -> .)
    COMMA           reduce using rule 128 (empty -> .)
    SEMICOLON       reduce using rule 128 (empty -> .)
    )               reduce using rule 128 (empty -> .)
    RSQUARE         reduce using rule 128 (empty -> .)

    arithOp                        shift and go to state 89
    empty                          shift and go to state 90
    numeric_expression2            shift and go to state 91

state 74

    (27) main_method -> MAIN CHEESE ( ) . block_statement
    (93) block_statement -> . LBRACKET block_statement2 RBRACKET

    LBRACKET        shift and go to state 94

    block_statement                shift and go to state 95

state 75

    (17) method_declaration -> FUNC type ID seen_function_id ( method_declaration2 . method_declaration3
    (21) method_declaration3 -> . ) seen_method_start block_statement

    )               shift and go to state 97

    method_declaration3            shift and go to state 96

state 76

    (23) parameter_list -> parameter . parameter_list2
    (24) parameter_list2 -> . COMMA parameter_list
    (25) parameter_list2 -> . empty
    (128) empty -> .

    COMMA           shift and go to state 100
    )               reduce using rule 128 (empty -> .)

    parameter_list2                shift and go to state 98
    empty                          shift and go to state 99

state 77

    (20) method_declaration2 -> empty .

    )               reduce using rule 20 (method_declaration2 -> empty .)


state 78

    (26) parameter -> type . ID

    ID              shift and go to state 101


state 79

    (19) method_declaration2 -> parameter_list .

    )               reduce using rule 19 (method_declaration2 -> parameter_list .)


state 80

    (60) factor -> ( seen_lpar superexpression . ) seen_rpar

    )               shift and go to state 102


state 81

    (39) compare -> compare_symbols numeric_expression . seen_comp
    (47) seen_comp -> .

    AND             reduce using rule 47 (seen_comp -> .)
    OR              reduce using rule 47 (seen_comp -> .)
    COMMA           reduce using rule 47 (seen_comp -> .)
    SEMICOLON       reduce using rule 47 (seen_comp -> .)
    )               reduce using rule 47 (seen_comp -> .)
    RSQUARE         reduce using rule 47 (seen_comp -> .)

    seen_comp                      shift and go to state 103

state 82

    (34) superexpression2 -> andor superexpression .

    COMMA           reduce using rule 34 (superexpression2 -> andor superexpression .)
    SEMICOLON       reduce using rule 34 (superexpression2 -> andor superexpression .)
    )               reduce using rule 34 (superexpression2 -> andor superexpression .)
    RSQUARE         reduce using rule 34 (superexpression2 -> andor superexpression .)


state 83

    (55) term2 -> geomOp term .

    +               reduce using rule 55 (term2 -> geomOp term .)
    -               reduce using rule 55 (term2 -> geomOp term .)
    CEQ             reduce using rule 55 (term2 -> geomOp term .)
    CGT             reduce using rule 55 (term2 -> geomOp term .)
    CGE             reduce using rule 55 (term2 -> geomOp term .)
    CLT             reduce using rule 55 (term2 -> geomOp term .)
    CLE             reduce using rule 55 (term2 -> geomOp term .)
    CNE             reduce using rule 55 (term2 -> geomOp term .)
    AND             reduce using rule 55 (term2 -> geomOp term .)
    OR              reduce using rule 55 (term2 -> geomOp term .)
    COMMA           reduce using rule 55 (term2 -> geomOp term .)
    SEMICOLON       reduce using rule 55 (term2 -> geomOp term .)
    )               reduce using rule 55 (term2 -> geomOp term .)
    RSQUARE         reduce using rule 55 (term2 -> geomOp term .)


state 84

    (70) cst_expression2 -> empty .

    *               reduce using rule 70 (cst_expression2 -> empty .)
    /               reduce using rule 70 (cst_expression2 -> empty .)
    +               reduce using rule 70 (cst_expression2 -> empty .)
    -               reduce using rule 70 (cst_expression2 -> empty .)
    CEQ             reduce using rule 70 (cst_expression2 -> empty .)
    CGT             reduce using rule 70 (cst_expression2 -> empty .)
    CGE             reduce using rule 70 (cst_expression2 -> empty .)
    CLT             reduce using rule 70 (cst_expression2 -> empty .)
    CLE             reduce using rule 70 (cst_expression2 -> empty .)
    CNE             reduce using rule 70 (cst_expression2 -> empty .)
    AND             reduce using rule 70 (cst_expression2 -> empty .)
    OR              reduce using rule 70 (cst_expression2 -> empty .)
    COMMA           reduce using rule 70 (cst_expression2 -> empty .)
    SEMICOLON       reduce using rule 70 (cst_expression2 -> empty .)
    )               reduce using rule 70 (cst_expression2 -> empty .)
    RSQUARE         reduce using rule 70 (cst_expression2 -> empty .)


state 85

    (68) cst_expression2 -> LSQUARE . superexpression RSQUARE
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 104
    term                           shift and go to state 49

state 86

    (66) cst_expression -> ID seen_id_or_func cst_expression2 .

    *               reduce using rule 66 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    /               reduce using rule 66 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    +               reduce using rule 66 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    -               reduce using rule 66 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    CEQ             reduce using rule 66 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    CGT             reduce using rule 66 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    CGE             reduce using rule 66 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    CLT             reduce using rule 66 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    CLE             reduce using rule 66 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    CNE             reduce using rule 66 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    AND             reduce using rule 66 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    OR              reduce using rule 66 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    )               reduce using rule 66 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    SEMICOLON       reduce using rule 66 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    COMMA           reduce using rule 66 (cst_expression -> ID seen_id_or_func cst_expression2 .)
    RSQUARE         reduce using rule 66 (cst_expression -> ID seen_id_or_func cst_expression2 .)


state 87

    (69) cst_expression2 -> function_call .

    *               reduce using rule 69 (cst_expression2 -> function_call .)
    /               reduce using rule 69 (cst_expression2 -> function_call .)
    +               reduce using rule 69 (cst_expression2 -> function_call .)
    -               reduce using rule 69 (cst_expression2 -> function_call .)
    CEQ             reduce using rule 69 (cst_expression2 -> function_call .)
    CGT             reduce using rule 69 (cst_expression2 -> function_call .)
    CGE             reduce using rule 69 (cst_expression2 -> function_call .)
    CLT             reduce using rule 69 (cst_expression2 -> function_call .)
    CLE             reduce using rule 69 (cst_expression2 -> function_call .)
    CNE             reduce using rule 69 (cst_expression2 -> function_call .)
    AND             reduce using rule 69 (cst_expression2 -> function_call .)
    OR              reduce using rule 69 (cst_expression2 -> function_call .)
    COMMA           reduce using rule 69 (cst_expression2 -> function_call .)
    SEMICOLON       reduce using rule 69 (cst_expression2 -> function_call .)
    )               reduce using rule 69 (cst_expression2 -> function_call .)
    RSQUARE         reduce using rule 69 (cst_expression2 -> function_call .)


state 88

    (71) function_call -> seen_func_id . ( args )

    (               shift and go to state 105


state 89

    (50) numeric_expression2 -> arithOp . numeric_expression
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 106
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    term                           shift and go to state 49

state 90

    (51) numeric_expression2 -> empty .

    CEQ             reduce using rule 51 (numeric_expression2 -> empty .)
    CGT             reduce using rule 51 (numeric_expression2 -> empty .)
    CGE             reduce using rule 51 (numeric_expression2 -> empty .)
    CLT             reduce using rule 51 (numeric_expression2 -> empty .)
    CLE             reduce using rule 51 (numeric_expression2 -> empty .)
    CNE             reduce using rule 51 (numeric_expression2 -> empty .)
    AND             reduce using rule 51 (numeric_expression2 -> empty .)
    OR              reduce using rule 51 (numeric_expression2 -> empty .)
    COMMA           reduce using rule 51 (numeric_expression2 -> empty .)
    SEMICOLON       reduce using rule 51 (numeric_expression2 -> empty .)
    )               reduce using rule 51 (numeric_expression2 -> empty .)
    RSQUARE         reduce using rule 51 (numeric_expression2 -> empty .)


state 91

    (48) numeric_expression -> term seen_term numeric_expression2 .

    CEQ             reduce using rule 48 (numeric_expression -> term seen_term numeric_expression2 .)
    CGT             reduce using rule 48 (numeric_expression -> term seen_term numeric_expression2 .)
    CGE             reduce using rule 48 (numeric_expression -> term seen_term numeric_expression2 .)
    CLT             reduce using rule 48 (numeric_expression -> term seen_term numeric_expression2 .)
    CLE             reduce using rule 48 (numeric_expression -> term seen_term numeric_expression2 .)
    CNE             reduce using rule 48 (numeric_expression -> term seen_term numeric_expression2 .)
    AND             reduce using rule 48 (numeric_expression -> term seen_term numeric_expression2 .)
    OR              reduce using rule 48 (numeric_expression -> term seen_term numeric_expression2 .)
    )               reduce using rule 48 (numeric_expression -> term seen_term numeric_expression2 .)
    COMMA           reduce using rule 48 (numeric_expression -> term seen_term numeric_expression2 .)
    SEMICOLON       reduce using rule 48 (numeric_expression -> term seen_term numeric_expression2 .)
    RSQUARE         reduce using rule 48 (numeric_expression -> term seen_term numeric_expression2 .)


state 92

    (53) arithOp -> - .

    (               reduce using rule 53 (arithOp -> - .)
    CSTDOUBLE       reduce using rule 53 (arithOp -> - .)
    CSTINT          reduce using rule 53 (arithOp -> - .)
    CSTSTRING       reduce using rule 53 (arithOp -> - .)
    ID              reduce using rule 53 (arithOp -> - .)


state 93

    (52) arithOp -> + .

    (               reduce using rule 52 (arithOp -> + .)
    CSTDOUBLE       reduce using rule 52 (arithOp -> + .)
    CSTINT          reduce using rule 52 (arithOp -> + .)
    CSTSTRING       reduce using rule 52 (arithOp -> + .)
    ID              reduce using rule 52 (arithOp -> + .)


state 94

    (93) block_statement -> LBRACKET . block_statement2 RBRACKET
    (94) block_statement2 -> . statement block_statement2
    (95) block_statement2 -> . empty
    (118) statement -> . variable_declaration
    (119) statement -> . variable_assignment SEMICOLON
    (120) statement -> . superexpression SEMICOLON
    (121) statement -> . if_statement
    (122) statement -> . loop_statement
    (123) statement -> . return
    (124) statement -> . print_statement
    (125) statement -> . read_statement
    (126) statement -> . geometry_statement SEMICOLON
    (128) empty -> .
    (7) variable_declaration -> . type variable_declaration2
    (32) variable_assignment -> . ID = superexpression
    (33) superexpression -> . expression superexpression2
    (88) if_statement -> . IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2
    (79) loop_statement -> . loophead block_statement seen_loop_block
    (127) return -> . RETURN superexpression SEMICOLON
    (97) print_statement -> . PRINT ( superexpression ) SEMICOLON
    (96) read_statement -> . SCAN ( ID ) SEMICOLON
    (98) geometry_statement -> . move
    (99) geometry_statement -> . rotate
    (100) geometry_statement -> . arc
    (101) geometry_statement -> . home
    (102) geometry_statement -> . pdown
    (103) geometry_statement -> . pup
    (104) geometry_statement -> . setp
    (105) geometry_statement -> . pcolor
    (106) geometry_statement -> . psize
    (107) geometry_statement -> . pclear
    (28) type -> . INT
    (29) type -> . DOUBLE
    (30) type -> . STRING
    (31) type -> . VOID
    (38) expression -> . numeric_expression compare
    (80) loophead -> . FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 )
    (81) loophead -> . WHILE ( seen_while_LPAR superexpression seen_while_exp )
    (108) move -> . MOVE ( superexpression )
    (109) rotate -> . ROTATE ( superexpression )
    (110) arc -> . ARC ( superexpression COMMA superexpression )
    (111) home -> . HOME ( )
    (112) pdown -> . PDOWN ( )
    (113) pup -> . PUP ( )
    (114) setp -> . SETP ( superexpression COMMA superexpression )
    (115) pcolor -> . PCOLOR ( superexpression COMMA superexpression COMMA superexpression )
    (116) psize -> . PSIZE ( superexpression )
    (117) pclear -> . PCLEAR ( )
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    RBRACKET        reduce using rule 128 (empty -> .)
    ID              shift and go to state 144
    IF              shift and go to state 135
    RETURN          shift and go to state 141
    PRINT           shift and go to state 124
    SCAN            shift and go to state 111
    INT             shift and go to state 8
    DOUBLE          shift and go to state 9
    STRING          shift and go to state 4
    VOID            shift and go to state 7
    FOR             shift and go to state 143
    WHILE           shift and go to state 140
    MOVE            shift and go to state 108
    ROTATE          shift and go to state 120
    ARC             shift and go to state 127
    HOME            shift and go to state 109
    PDOWN           shift and go to state 110
    PUP             shift and go to state 113
    SETP            shift and go to state 142
    PCOLOR          shift and go to state 139
    PSIZE           shift and go to state 114
    PCLEAR          shift and go to state 128
    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46

    pdown                          shift and go to state 107
    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    print_statement                shift and go to state 112
    variable_assignment            shift and go to state 115
    loop_statement                 shift and go to state 116
    block_statement2               shift and go to state 130
    loophead                       shift and go to state 118
    cst_expression                 shift and go to state 39
    psize                          shift and go to state 119
    pcolor                         shift and go to state 121
    home                           shift and go to state 122
    superexpression                shift and go to state 123
    if_statement                   shift and go to state 125
    rotate                         shift and go to state 126
    empty                          shift and go to state 129
    statement                      shift and go to state 117
    arc                            shift and go to state 131
    type                           shift and go to state 3
    setp                           shift and go to state 132
    return                         shift and go to state 133
    pup                            shift and go to state 134
    geometry_statement             shift and go to state 136
    read_statement                 shift and go to state 137
    variable_declaration           shift and go to state 138
    factor                         shift and go to state 45
    move                           shift and go to state 145
    term                           shift and go to state 49
    pclear                         shift and go to state 146

state 95

    (27) main_method -> MAIN CHEESE ( ) block_statement .

    $end            reduce using rule 27 (main_method -> MAIN CHEESE ( ) block_statement .)


state 96

    (17) method_declaration -> FUNC type ID seen_function_id ( method_declaration2 method_declaration3 .

    FUNC            reduce using rule 17 (method_declaration -> FUNC type ID seen_function_id ( method_declaration2 method_declaration3 .)
    MAIN            reduce using rule 17 (method_declaration -> FUNC type ID seen_function_id ( method_declaration2 method_declaration3 .)


state 97

    (21) method_declaration3 -> ) . seen_method_start block_statement
    (22) seen_method_start -> .

    LBRACKET        reduce using rule 22 (seen_method_start -> .)

    seen_method_start              shift and go to state 147

state 98

    (23) parameter_list -> parameter parameter_list2 .

    )               reduce using rule 23 (parameter_list -> parameter parameter_list2 .)


state 99

    (25) parameter_list2 -> empty .

    )               reduce using rule 25 (parameter_list2 -> empty .)


state 100

    (24) parameter_list2 -> COMMA . parameter_list
    (23) parameter_list -> . parameter parameter_list2
    (26) parameter -> . type ID
    (28) type -> . INT
    (29) type -> . DOUBLE
    (30) type -> . STRING
    (31) type -> . VOID

    INT             shift and go to state 8
    DOUBLE          shift and go to state 9
    STRING          shift and go to state 4
    VOID            shift and go to state 7

    parameter                      shift and go to state 76
    parameter_list                 shift and go to state 148
    type                           shift and go to state 78

state 101

    (26) parameter -> type ID .

    COMMA           reduce using rule 26 (parameter -> type ID .)
    )               reduce using rule 26 (parameter -> type ID .)


state 102

    (60) factor -> ( seen_lpar superexpression ) . seen_rpar
    (62) seen_rpar -> .

    *               reduce using rule 62 (seen_rpar -> .)
    /               reduce using rule 62 (seen_rpar -> .)
    +               reduce using rule 62 (seen_rpar -> .)
    -               reduce using rule 62 (seen_rpar -> .)
    CEQ             reduce using rule 62 (seen_rpar -> .)
    CGT             reduce using rule 62 (seen_rpar -> .)
    CGE             reduce using rule 62 (seen_rpar -> .)
    CLT             reduce using rule 62 (seen_rpar -> .)
    CLE             reduce using rule 62 (seen_rpar -> .)
    CNE             reduce using rule 62 (seen_rpar -> .)
    AND             reduce using rule 62 (seen_rpar -> .)
    OR              reduce using rule 62 (seen_rpar -> .)
    COMMA           reduce using rule 62 (seen_rpar -> .)
    SEMICOLON       reduce using rule 62 (seen_rpar -> .)
    )               reduce using rule 62 (seen_rpar -> .)
    RSQUARE         reduce using rule 62 (seen_rpar -> .)

    seen_rpar                      shift and go to state 149

state 103

    (39) compare -> compare_symbols numeric_expression seen_comp .

    AND             reduce using rule 39 (compare -> compare_symbols numeric_expression seen_comp .)
    OR              reduce using rule 39 (compare -> compare_symbols numeric_expression seen_comp .)
    COMMA           reduce using rule 39 (compare -> compare_symbols numeric_expression seen_comp .)
    SEMICOLON       reduce using rule 39 (compare -> compare_symbols numeric_expression seen_comp .)
    )               reduce using rule 39 (compare -> compare_symbols numeric_expression seen_comp .)
    RSQUARE         reduce using rule 39 (compare -> compare_symbols numeric_expression seen_comp .)


state 104

    (68) cst_expression2 -> LSQUARE superexpression . RSQUARE

    RSQUARE         shift and go to state 150


state 105

    (71) function_call -> seen_func_id ( . args )
    (73) args -> . arg
    (74) args -> . empty
    (75) arg -> . numeric_expression seen_arg more_args
    (128) empty -> .
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    )               reduce using rule 128 (empty -> .)
    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    empty                          shift and go to state 151
    args                           shift and go to state 153
    numeric_expression             shift and go to state 152
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    term                           shift and go to state 49
    arg                            shift and go to state 154

state 106

    (50) numeric_expression2 -> arithOp numeric_expression .

    CEQ             reduce using rule 50 (numeric_expression2 -> arithOp numeric_expression .)
    CGT             reduce using rule 50 (numeric_expression2 -> arithOp numeric_expression .)
    CGE             reduce using rule 50 (numeric_expression2 -> arithOp numeric_expression .)
    CLT             reduce using rule 50 (numeric_expression2 -> arithOp numeric_expression .)
    CLE             reduce using rule 50 (numeric_expression2 -> arithOp numeric_expression .)
    CNE             reduce using rule 50 (numeric_expression2 -> arithOp numeric_expression .)
    AND             reduce using rule 50 (numeric_expression2 -> arithOp numeric_expression .)
    OR              reduce using rule 50 (numeric_expression2 -> arithOp numeric_expression .)
    COMMA           reduce using rule 50 (numeric_expression2 -> arithOp numeric_expression .)
    SEMICOLON       reduce using rule 50 (numeric_expression2 -> arithOp numeric_expression .)
    )               reduce using rule 50 (numeric_expression2 -> arithOp numeric_expression .)
    RSQUARE         reduce using rule 50 (numeric_expression2 -> arithOp numeric_expression .)


state 107

    (102) geometry_statement -> pdown .

    SEMICOLON       reduce using rule 102 (geometry_statement -> pdown .)


state 108

    (108) move -> MOVE . ( superexpression )

    (               shift and go to state 155


state 109

    (111) home -> HOME . ( )

    (               shift and go to state 156


state 110

    (112) pdown -> PDOWN . ( )

    (               shift and go to state 157


state 111

    (96) read_statement -> SCAN . ( ID ) SEMICOLON

    (               shift and go to state 158


state 112

    (124) statement -> print_statement .

    ID              reduce using rule 124 (statement -> print_statement .)
    IF              reduce using rule 124 (statement -> print_statement .)
    RETURN          reduce using rule 124 (statement -> print_statement .)
    PRINT           reduce using rule 124 (statement -> print_statement .)
    SCAN            reduce using rule 124 (statement -> print_statement .)
    INT             reduce using rule 124 (statement -> print_statement .)
    DOUBLE          reduce using rule 124 (statement -> print_statement .)
    STRING          reduce using rule 124 (statement -> print_statement .)
    VOID            reduce using rule 124 (statement -> print_statement .)
    FOR             reduce using rule 124 (statement -> print_statement .)
    WHILE           reduce using rule 124 (statement -> print_statement .)
    MOVE            reduce using rule 124 (statement -> print_statement .)
    ROTATE          reduce using rule 124 (statement -> print_statement .)
    ARC             reduce using rule 124 (statement -> print_statement .)
    HOME            reduce using rule 124 (statement -> print_statement .)
    PDOWN           reduce using rule 124 (statement -> print_statement .)
    PUP             reduce using rule 124 (statement -> print_statement .)
    SETP            reduce using rule 124 (statement -> print_statement .)
    PCOLOR          reduce using rule 124 (statement -> print_statement .)
    PSIZE           reduce using rule 124 (statement -> print_statement .)
    PCLEAR          reduce using rule 124 (statement -> print_statement .)
    (               reduce using rule 124 (statement -> print_statement .)
    CSTDOUBLE       reduce using rule 124 (statement -> print_statement .)
    CSTINT          reduce using rule 124 (statement -> print_statement .)
    CSTSTRING       reduce using rule 124 (statement -> print_statement .)
    RBRACKET        reduce using rule 124 (statement -> print_statement .)


state 113

    (113) pup -> PUP . ( )

    (               shift and go to state 159


state 114

    (116) psize -> PSIZE . ( superexpression )

    (               shift and go to state 160


state 115

    (119) statement -> variable_assignment . SEMICOLON

    SEMICOLON       shift and go to state 161


state 116

    (122) statement -> loop_statement .

    ID              reduce using rule 122 (statement -> loop_statement .)
    IF              reduce using rule 122 (statement -> loop_statement .)
    RETURN          reduce using rule 122 (statement -> loop_statement .)
    PRINT           reduce using rule 122 (statement -> loop_statement .)
    SCAN            reduce using rule 122 (statement -> loop_statement .)
    INT             reduce using rule 122 (statement -> loop_statement .)
    DOUBLE          reduce using rule 122 (statement -> loop_statement .)
    STRING          reduce using rule 122 (statement -> loop_statement .)
    VOID            reduce using rule 122 (statement -> loop_statement .)
    FOR             reduce using rule 122 (statement -> loop_statement .)
    WHILE           reduce using rule 122 (statement -> loop_statement .)
    MOVE            reduce using rule 122 (statement -> loop_statement .)
    ROTATE          reduce using rule 122 (statement -> loop_statement .)
    ARC             reduce using rule 122 (statement -> loop_statement .)
    HOME            reduce using rule 122 (statement -> loop_statement .)
    PDOWN           reduce using rule 122 (statement -> loop_statement .)
    PUP             reduce using rule 122 (statement -> loop_statement .)
    SETP            reduce using rule 122 (statement -> loop_statement .)
    PCOLOR          reduce using rule 122 (statement -> loop_statement .)
    PSIZE           reduce using rule 122 (statement -> loop_statement .)
    PCLEAR          reduce using rule 122 (statement -> loop_statement .)
    (               reduce using rule 122 (statement -> loop_statement .)
    CSTDOUBLE       reduce using rule 122 (statement -> loop_statement .)
    CSTINT          reduce using rule 122 (statement -> loop_statement .)
    CSTSTRING       reduce using rule 122 (statement -> loop_statement .)
    RBRACKET        reduce using rule 122 (statement -> loop_statement .)


state 117

    (94) block_statement2 -> statement . block_statement2
    (94) block_statement2 -> . statement block_statement2
    (95) block_statement2 -> . empty
    (118) statement -> . variable_declaration
    (119) statement -> . variable_assignment SEMICOLON
    (120) statement -> . superexpression SEMICOLON
    (121) statement -> . if_statement
    (122) statement -> . loop_statement
    (123) statement -> . return
    (124) statement -> . print_statement
    (125) statement -> . read_statement
    (126) statement -> . geometry_statement SEMICOLON
    (128) empty -> .
    (7) variable_declaration -> . type variable_declaration2
    (32) variable_assignment -> . ID = superexpression
    (33) superexpression -> . expression superexpression2
    (88) if_statement -> . IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2
    (79) loop_statement -> . loophead block_statement seen_loop_block
    (127) return -> . RETURN superexpression SEMICOLON
    (97) print_statement -> . PRINT ( superexpression ) SEMICOLON
    (96) read_statement -> . SCAN ( ID ) SEMICOLON
    (98) geometry_statement -> . move
    (99) geometry_statement -> . rotate
    (100) geometry_statement -> . arc
    (101) geometry_statement -> . home
    (102) geometry_statement -> . pdown
    (103) geometry_statement -> . pup
    (104) geometry_statement -> . setp
    (105) geometry_statement -> . pcolor
    (106) geometry_statement -> . psize
    (107) geometry_statement -> . pclear
    (28) type -> . INT
    (29) type -> . DOUBLE
    (30) type -> . STRING
    (31) type -> . VOID
    (38) expression -> . numeric_expression compare
    (80) loophead -> . FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 )
    (81) loophead -> . WHILE ( seen_while_LPAR superexpression seen_while_exp )
    (108) move -> . MOVE ( superexpression )
    (109) rotate -> . ROTATE ( superexpression )
    (110) arc -> . ARC ( superexpression COMMA superexpression )
    (111) home -> . HOME ( )
    (112) pdown -> . PDOWN ( )
    (113) pup -> . PUP ( )
    (114) setp -> . SETP ( superexpression COMMA superexpression )
    (115) pcolor -> . PCOLOR ( superexpression COMMA superexpression COMMA superexpression )
    (116) psize -> . PSIZE ( superexpression )
    (117) pclear -> . PCLEAR ( )
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    RBRACKET        reduce using rule 128 (empty -> .)
    ID              shift and go to state 144
    IF              shift and go to state 135
    RETURN          shift and go to state 141
    PRINT           shift and go to state 124
    SCAN            shift and go to state 111
    INT             shift and go to state 8
    DOUBLE          shift and go to state 9
    STRING          shift and go to state 4
    VOID            shift and go to state 7
    FOR             shift and go to state 143
    WHILE           shift and go to state 140
    MOVE            shift and go to state 108
    ROTATE          shift and go to state 120
    ARC             shift and go to state 127
    HOME            shift and go to state 109
    PDOWN           shift and go to state 110
    PUP             shift and go to state 113
    SETP            shift and go to state 142
    PCOLOR          shift and go to state 139
    PSIZE           shift and go to state 114
    PCLEAR          shift and go to state 128
    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46

    pdown                          shift and go to state 107
    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    print_statement                shift and go to state 112
    variable_assignment            shift and go to state 115
    loop_statement                 shift and go to state 116
    statement                      shift and go to state 117
    loophead                       shift and go to state 118
    cst_expression                 shift and go to state 39
    psize                          shift and go to state 119
    pcolor                         shift and go to state 121
    home                           shift and go to state 122
    superexpression                shift and go to state 123
    if_statement                   shift and go to state 125
    rotate                         shift and go to state 126
    empty                          shift and go to state 129
    block_statement2               shift and go to state 162
    arc                            shift and go to state 131
    type                           shift and go to state 3
    setp                           shift and go to state 132
    return                         shift and go to state 133
    pup                            shift and go to state 134
    geometry_statement             shift and go to state 136
    read_statement                 shift and go to state 137
    variable_declaration           shift and go to state 138
    factor                         shift and go to state 45
    move                           shift and go to state 145
    term                           shift and go to state 49
    pclear                         shift and go to state 146

state 118

    (79) loop_statement -> loophead . block_statement seen_loop_block
    (93) block_statement -> . LBRACKET block_statement2 RBRACKET

    LBRACKET        shift and go to state 94

    block_statement                shift and go to state 163

state 119

    (106) geometry_statement -> psize .

    SEMICOLON       reduce using rule 106 (geometry_statement -> psize .)


state 120

    (109) rotate -> ROTATE . ( superexpression )

    (               shift and go to state 164


state 121

    (105) geometry_statement -> pcolor .

    SEMICOLON       reduce using rule 105 (geometry_statement -> pcolor .)


state 122

    (101) geometry_statement -> home .

    SEMICOLON       reduce using rule 101 (geometry_statement -> home .)


state 123

    (120) statement -> superexpression . SEMICOLON

    SEMICOLON       shift and go to state 165


state 124

    (97) print_statement -> PRINT . ( superexpression ) SEMICOLON

    (               shift and go to state 166


state 125

    (121) statement -> if_statement .

    ID              reduce using rule 121 (statement -> if_statement .)
    IF              reduce using rule 121 (statement -> if_statement .)
    RETURN          reduce using rule 121 (statement -> if_statement .)
    PRINT           reduce using rule 121 (statement -> if_statement .)
    SCAN            reduce using rule 121 (statement -> if_statement .)
    INT             reduce using rule 121 (statement -> if_statement .)
    DOUBLE          reduce using rule 121 (statement -> if_statement .)
    STRING          reduce using rule 121 (statement -> if_statement .)
    VOID            reduce using rule 121 (statement -> if_statement .)
    FOR             reduce using rule 121 (statement -> if_statement .)
    WHILE           reduce using rule 121 (statement -> if_statement .)
    MOVE            reduce using rule 121 (statement -> if_statement .)
    ROTATE          reduce using rule 121 (statement -> if_statement .)
    ARC             reduce using rule 121 (statement -> if_statement .)
    HOME            reduce using rule 121 (statement -> if_statement .)
    PDOWN           reduce using rule 121 (statement -> if_statement .)
    PUP             reduce using rule 121 (statement -> if_statement .)
    SETP            reduce using rule 121 (statement -> if_statement .)
    PCOLOR          reduce using rule 121 (statement -> if_statement .)
    PSIZE           reduce using rule 121 (statement -> if_statement .)
    PCLEAR          reduce using rule 121 (statement -> if_statement .)
    (               reduce using rule 121 (statement -> if_statement .)
    CSTDOUBLE       reduce using rule 121 (statement -> if_statement .)
    CSTINT          reduce using rule 121 (statement -> if_statement .)
    CSTSTRING       reduce using rule 121 (statement -> if_statement .)
    RBRACKET        reduce using rule 121 (statement -> if_statement .)


state 126

    (99) geometry_statement -> rotate .

    SEMICOLON       reduce using rule 99 (geometry_statement -> rotate .)


state 127

    (110) arc -> ARC . ( superexpression COMMA superexpression )

    (               shift and go to state 167


state 128

    (117) pclear -> PCLEAR . ( )

    (               shift and go to state 168


state 129

    (95) block_statement2 -> empty .

    RBRACKET        reduce using rule 95 (block_statement2 -> empty .)


state 130

    (93) block_statement -> LBRACKET block_statement2 . RBRACKET

    RBRACKET        shift and go to state 169


state 131

    (100) geometry_statement -> arc .

    SEMICOLON       reduce using rule 100 (geometry_statement -> arc .)


state 132

    (104) geometry_statement -> setp .

    SEMICOLON       reduce using rule 104 (geometry_statement -> setp .)


state 133

    (123) statement -> return .

    ID              reduce using rule 123 (statement -> return .)
    IF              reduce using rule 123 (statement -> return .)
    RETURN          reduce using rule 123 (statement -> return .)
    PRINT           reduce using rule 123 (statement -> return .)
    SCAN            reduce using rule 123 (statement -> return .)
    INT             reduce using rule 123 (statement -> return .)
    DOUBLE          reduce using rule 123 (statement -> return .)
    STRING          reduce using rule 123 (statement -> return .)
    VOID            reduce using rule 123 (statement -> return .)
    FOR             reduce using rule 123 (statement -> return .)
    WHILE           reduce using rule 123 (statement -> return .)
    MOVE            reduce using rule 123 (statement -> return .)
    ROTATE          reduce using rule 123 (statement -> return .)
    ARC             reduce using rule 123 (statement -> return .)
    HOME            reduce using rule 123 (statement -> return .)
    PDOWN           reduce using rule 123 (statement -> return .)
    PUP             reduce using rule 123 (statement -> return .)
    SETP            reduce using rule 123 (statement -> return .)
    PCOLOR          reduce using rule 123 (statement -> return .)
    PSIZE           reduce using rule 123 (statement -> return .)
    PCLEAR          reduce using rule 123 (statement -> return .)
    (               reduce using rule 123 (statement -> return .)
    CSTDOUBLE       reduce using rule 123 (statement -> return .)
    CSTINT          reduce using rule 123 (statement -> return .)
    CSTSTRING       reduce using rule 123 (statement -> return .)
    RBRACKET        reduce using rule 123 (statement -> return .)


state 134

    (103) geometry_statement -> pup .

    SEMICOLON       reduce using rule 103 (geometry_statement -> pup .)


state 135

    (88) if_statement -> IF . ( superexpression ) seen_condition block_statement seen_condition_block if_statement2

    (               shift and go to state 170


state 136

    (126) statement -> geometry_statement . SEMICOLON

    SEMICOLON       shift and go to state 171


state 137

    (125) statement -> read_statement .

    ID              reduce using rule 125 (statement -> read_statement .)
    IF              reduce using rule 125 (statement -> read_statement .)
    RETURN          reduce using rule 125 (statement -> read_statement .)
    PRINT           reduce using rule 125 (statement -> read_statement .)
    SCAN            reduce using rule 125 (statement -> read_statement .)
    INT             reduce using rule 125 (statement -> read_statement .)
    DOUBLE          reduce using rule 125 (statement -> read_statement .)
    STRING          reduce using rule 125 (statement -> read_statement .)
    VOID            reduce using rule 125 (statement -> read_statement .)
    FOR             reduce using rule 125 (statement -> read_statement .)
    WHILE           reduce using rule 125 (statement -> read_statement .)
    MOVE            reduce using rule 125 (statement -> read_statement .)
    ROTATE          reduce using rule 125 (statement -> read_statement .)
    ARC             reduce using rule 125 (statement -> read_statement .)
    HOME            reduce using rule 125 (statement -> read_statement .)
    PDOWN           reduce using rule 125 (statement -> read_statement .)
    PUP             reduce using rule 125 (statement -> read_statement .)
    SETP            reduce using rule 125 (statement -> read_statement .)
    PCOLOR          reduce using rule 125 (statement -> read_statement .)
    PSIZE           reduce using rule 125 (statement -> read_statement .)
    PCLEAR          reduce using rule 125 (statement -> read_statement .)
    (               reduce using rule 125 (statement -> read_statement .)
    CSTDOUBLE       reduce using rule 125 (statement -> read_statement .)
    CSTINT          reduce using rule 125 (statement -> read_statement .)
    CSTSTRING       reduce using rule 125 (statement -> read_statement .)
    RBRACKET        reduce using rule 125 (statement -> read_statement .)


state 138

    (118) statement -> variable_declaration .

    ID              reduce using rule 118 (statement -> variable_declaration .)
    IF              reduce using rule 118 (statement -> variable_declaration .)
    RETURN          reduce using rule 118 (statement -> variable_declaration .)
    PRINT           reduce using rule 118 (statement -> variable_declaration .)
    SCAN            reduce using rule 118 (statement -> variable_declaration .)
    INT             reduce using rule 118 (statement -> variable_declaration .)
    DOUBLE          reduce using rule 118 (statement -> variable_declaration .)
    STRING          reduce using rule 118 (statement -> variable_declaration .)
    VOID            reduce using rule 118 (statement -> variable_declaration .)
    FOR             reduce using rule 118 (statement -> variable_declaration .)
    WHILE           reduce using rule 118 (statement -> variable_declaration .)
    MOVE            reduce using rule 118 (statement -> variable_declaration .)
    ROTATE          reduce using rule 118 (statement -> variable_declaration .)
    ARC             reduce using rule 118 (statement -> variable_declaration .)
    HOME            reduce using rule 118 (statement -> variable_declaration .)
    PDOWN           reduce using rule 118 (statement -> variable_declaration .)
    PUP             reduce using rule 118 (statement -> variable_declaration .)
    SETP            reduce using rule 118 (statement -> variable_declaration .)
    PCOLOR          reduce using rule 118 (statement -> variable_declaration .)
    PSIZE           reduce using rule 118 (statement -> variable_declaration .)
    PCLEAR          reduce using rule 118 (statement -> variable_declaration .)
    (               reduce using rule 118 (statement -> variable_declaration .)
    CSTDOUBLE       reduce using rule 118 (statement -> variable_declaration .)
    CSTINT          reduce using rule 118 (statement -> variable_declaration .)
    CSTSTRING       reduce using rule 118 (statement -> variable_declaration .)
    RBRACKET        reduce using rule 118 (statement -> variable_declaration .)


state 139

    (115) pcolor -> PCOLOR . ( superexpression COMMA superexpression COMMA superexpression )

    (               shift and go to state 172


state 140

    (81) loophead -> WHILE . ( seen_while_LPAR superexpression seen_while_exp )

    (               shift and go to state 173


state 141

    (127) return -> RETURN . superexpression SEMICOLON
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 174
    term                           shift and go to state 49

state 142

    (114) setp -> SETP . ( superexpression COMMA superexpression )

    (               shift and go to state 175


state 143

    (80) loophead -> FOR . ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 )

    (               shift and go to state 176


state 144

    (32) variable_assignment -> ID . = superexpression
    (66) cst_expression -> ID . seen_id_or_func cst_expression2
    (67) seen_id_or_func -> .

    =               shift and go to state 177
    LSQUARE         reduce using rule 67 (seen_id_or_func -> .)
    (               reduce using rule 67 (seen_id_or_func -> .)
    *               reduce using rule 67 (seen_id_or_func -> .)
    /               reduce using rule 67 (seen_id_or_func -> .)
    +               reduce using rule 67 (seen_id_or_func -> .)
    -               reduce using rule 67 (seen_id_or_func -> .)
    CEQ             reduce using rule 67 (seen_id_or_func -> .)
    CGT             reduce using rule 67 (seen_id_or_func -> .)
    CGE             reduce using rule 67 (seen_id_or_func -> .)
    CLT             reduce using rule 67 (seen_id_or_func -> .)
    CLE             reduce using rule 67 (seen_id_or_func -> .)
    CNE             reduce using rule 67 (seen_id_or_func -> .)
    AND             reduce using rule 67 (seen_id_or_func -> .)
    OR              reduce using rule 67 (seen_id_or_func -> .)
    SEMICOLON       reduce using rule 67 (seen_id_or_func -> .)

    seen_id_or_func                shift and go to state 72

state 145

    (98) geometry_statement -> move .

    SEMICOLON       reduce using rule 98 (geometry_statement -> move .)


state 146

    (107) geometry_statement -> pclear .

    SEMICOLON       reduce using rule 107 (geometry_statement -> pclear .)


state 147

    (21) method_declaration3 -> ) seen_method_start . block_statement
    (93) block_statement -> . LBRACKET block_statement2 RBRACKET

    LBRACKET        shift and go to state 94

    block_statement                shift and go to state 178

state 148

    (24) parameter_list2 -> COMMA parameter_list .

    )               reduce using rule 24 (parameter_list2 -> COMMA parameter_list .)


state 149

    (60) factor -> ( seen_lpar superexpression ) seen_rpar .

    *               reduce using rule 60 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    /               reduce using rule 60 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    +               reduce using rule 60 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    -               reduce using rule 60 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    CEQ             reduce using rule 60 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    CGT             reduce using rule 60 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    CGE             reduce using rule 60 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    CLT             reduce using rule 60 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    CLE             reduce using rule 60 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    CNE             reduce using rule 60 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    AND             reduce using rule 60 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    OR              reduce using rule 60 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    )               reduce using rule 60 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    COMMA           reduce using rule 60 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    SEMICOLON       reduce using rule 60 (factor -> ( seen_lpar superexpression ) seen_rpar .)
    RSQUARE         reduce using rule 60 (factor -> ( seen_lpar superexpression ) seen_rpar .)


state 150

    (68) cst_expression2 -> LSQUARE superexpression RSQUARE .

    *               reduce using rule 68 (cst_expression2 -> LSQUARE superexpression RSQUARE .)
    /               reduce using rule 68 (cst_expression2 -> LSQUARE superexpression RSQUARE .)
    +               reduce using rule 68 (cst_expression2 -> LSQUARE superexpression RSQUARE .)
    -               reduce using rule 68 (cst_expression2 -> LSQUARE superexpression RSQUARE .)
    CEQ             reduce using rule 68 (cst_expression2 -> LSQUARE superexpression RSQUARE .)
    CGT             reduce using rule 68 (cst_expression2 -> LSQUARE superexpression RSQUARE .)
    CGE             reduce using rule 68 (cst_expression2 -> LSQUARE superexpression RSQUARE .)
    CLT             reduce using rule 68 (cst_expression2 -> LSQUARE superexpression RSQUARE .)
    CLE             reduce using rule 68 (cst_expression2 -> LSQUARE superexpression RSQUARE .)
    CNE             reduce using rule 68 (cst_expression2 -> LSQUARE superexpression RSQUARE .)
    AND             reduce using rule 68 (cst_expression2 -> LSQUARE superexpression RSQUARE .)
    OR              reduce using rule 68 (cst_expression2 -> LSQUARE superexpression RSQUARE .)
    COMMA           reduce using rule 68 (cst_expression2 -> LSQUARE superexpression RSQUARE .)
    SEMICOLON       reduce using rule 68 (cst_expression2 -> LSQUARE superexpression RSQUARE .)
    )               reduce using rule 68 (cst_expression2 -> LSQUARE superexpression RSQUARE .)
    RSQUARE         reduce using rule 68 (cst_expression2 -> LSQUARE superexpression RSQUARE .)


state 151

    (74) args -> empty .

    )               reduce using rule 74 (args -> empty .)


state 152

    (75) arg -> numeric_expression . seen_arg more_args
    (76) seen_arg -> .

    COMMA           reduce using rule 76 (seen_arg -> .)
    )               reduce using rule 76 (seen_arg -> .)

    seen_arg                       shift and go to state 179

state 153

    (71) function_call -> seen_func_id ( args . )

    )               shift and go to state 180


state 154

    (73) args -> arg .

    )               reduce using rule 73 (args -> arg .)


state 155

    (108) move -> MOVE ( . superexpression )
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 181
    term                           shift and go to state 49

state 156

    (111) home -> HOME ( . )

    )               shift and go to state 182


state 157

    (112) pdown -> PDOWN ( . )

    )               shift and go to state 183


state 158

    (96) read_statement -> SCAN ( . ID ) SEMICOLON

    ID              shift and go to state 184


state 159

    (113) pup -> PUP ( . )

    )               shift and go to state 185


state 160

    (116) psize -> PSIZE ( . superexpression )
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 186
    term                           shift and go to state 49

state 161

    (119) statement -> variable_assignment SEMICOLON .

    ID              reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    IF              reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    RETURN          reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    PRINT           reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    SCAN            reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    INT             reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    DOUBLE          reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    STRING          reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    VOID            reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    FOR             reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    WHILE           reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    MOVE            reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    ROTATE          reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    ARC             reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    HOME            reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    PDOWN           reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    PUP             reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    SETP            reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    PCOLOR          reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    PSIZE           reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    PCLEAR          reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    (               reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    CSTDOUBLE       reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    CSTINT          reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    CSTSTRING       reduce using rule 119 (statement -> variable_assignment SEMICOLON .)
    RBRACKET        reduce using rule 119 (statement -> variable_assignment SEMICOLON .)


state 162

    (94) block_statement2 -> statement block_statement2 .

    RBRACKET        reduce using rule 94 (block_statement2 -> statement block_statement2 .)


state 163

    (79) loop_statement -> loophead block_statement . seen_loop_block
    (87) seen_loop_block -> .

    ID              reduce using rule 87 (seen_loop_block -> .)
    IF              reduce using rule 87 (seen_loop_block -> .)
    RETURN          reduce using rule 87 (seen_loop_block -> .)
    PRINT           reduce using rule 87 (seen_loop_block -> .)
    SCAN            reduce using rule 87 (seen_loop_block -> .)
    INT             reduce using rule 87 (seen_loop_block -> .)
    DOUBLE          reduce using rule 87 (seen_loop_block -> .)
    STRING          reduce using rule 87 (seen_loop_block -> .)
    VOID            reduce using rule 87 (seen_loop_block -> .)
    FOR             reduce using rule 87 (seen_loop_block -> .)
    WHILE           reduce using rule 87 (seen_loop_block -> .)
    MOVE            reduce using rule 87 (seen_loop_block -> .)
    ROTATE          reduce using rule 87 (seen_loop_block -> .)
    ARC             reduce using rule 87 (seen_loop_block -> .)
    HOME            reduce using rule 87 (seen_loop_block -> .)
    PDOWN           reduce using rule 87 (seen_loop_block -> .)
    PUP             reduce using rule 87 (seen_loop_block -> .)
    SETP            reduce using rule 87 (seen_loop_block -> .)
    PCOLOR          reduce using rule 87 (seen_loop_block -> .)
    PSIZE           reduce using rule 87 (seen_loop_block -> .)
    PCLEAR          reduce using rule 87 (seen_loop_block -> .)
    (               reduce using rule 87 (seen_loop_block -> .)
    CSTDOUBLE       reduce using rule 87 (seen_loop_block -> .)
    CSTINT          reduce using rule 87 (seen_loop_block -> .)
    CSTSTRING       reduce using rule 87 (seen_loop_block -> .)
    RBRACKET        reduce using rule 87 (seen_loop_block -> .)

    seen_loop_block                shift and go to state 187

state 164

    (109) rotate -> ROTATE ( . superexpression )
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 188
    term                           shift and go to state 49

state 165

    (120) statement -> superexpression SEMICOLON .

    ID              reduce using rule 120 (statement -> superexpression SEMICOLON .)
    IF              reduce using rule 120 (statement -> superexpression SEMICOLON .)
    RETURN          reduce using rule 120 (statement -> superexpression SEMICOLON .)
    PRINT           reduce using rule 120 (statement -> superexpression SEMICOLON .)
    SCAN            reduce using rule 120 (statement -> superexpression SEMICOLON .)
    INT             reduce using rule 120 (statement -> superexpression SEMICOLON .)
    DOUBLE          reduce using rule 120 (statement -> superexpression SEMICOLON .)
    STRING          reduce using rule 120 (statement -> superexpression SEMICOLON .)
    VOID            reduce using rule 120 (statement -> superexpression SEMICOLON .)
    FOR             reduce using rule 120 (statement -> superexpression SEMICOLON .)
    WHILE           reduce using rule 120 (statement -> superexpression SEMICOLON .)
    MOVE            reduce using rule 120 (statement -> superexpression SEMICOLON .)
    ROTATE          reduce using rule 120 (statement -> superexpression SEMICOLON .)
    ARC             reduce using rule 120 (statement -> superexpression SEMICOLON .)
    HOME            reduce using rule 120 (statement -> superexpression SEMICOLON .)
    PDOWN           reduce using rule 120 (statement -> superexpression SEMICOLON .)
    PUP             reduce using rule 120 (statement -> superexpression SEMICOLON .)
    SETP            reduce using rule 120 (statement -> superexpression SEMICOLON .)
    PCOLOR          reduce using rule 120 (statement -> superexpression SEMICOLON .)
    PSIZE           reduce using rule 120 (statement -> superexpression SEMICOLON .)
    PCLEAR          reduce using rule 120 (statement -> superexpression SEMICOLON .)
    (               reduce using rule 120 (statement -> superexpression SEMICOLON .)
    CSTDOUBLE       reduce using rule 120 (statement -> superexpression SEMICOLON .)
    CSTINT          reduce using rule 120 (statement -> superexpression SEMICOLON .)
    CSTSTRING       reduce using rule 120 (statement -> superexpression SEMICOLON .)
    RBRACKET        reduce using rule 120 (statement -> superexpression SEMICOLON .)


state 166

    (97) print_statement -> PRINT ( . superexpression ) SEMICOLON
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 189
    term                           shift and go to state 49

state 167

    (110) arc -> ARC ( . superexpression COMMA superexpression )
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 190
    term                           shift and go to state 49

state 168

    (117) pclear -> PCLEAR ( . )

    )               shift and go to state 191


state 169

    (93) block_statement -> LBRACKET block_statement2 RBRACKET .

    ID              reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    IF              reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    RETURN          reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    PRINT           reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    SCAN            reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    INT             reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    DOUBLE          reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    STRING          reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    VOID            reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    FOR             reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    WHILE           reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    MOVE            reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    ROTATE          reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    ARC             reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    HOME            reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    PDOWN           reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    PUP             reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    SETP            reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    PCOLOR          reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    PSIZE           reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    PCLEAR          reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    (               reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    CSTDOUBLE       reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    CSTINT          reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    CSTSTRING       reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    RBRACKET        reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    FUNC            reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    MAIN            reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    ELSE            reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)
    $end            reduce using rule 93 (block_statement -> LBRACKET block_statement2 RBRACKET .)


state 170

    (88) if_statement -> IF ( . superexpression ) seen_condition block_statement seen_condition_block if_statement2
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 192
    term                           shift and go to state 49

state 171

    (126) statement -> geometry_statement SEMICOLON .

    ID              reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    IF              reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    RETURN          reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    PRINT           reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    SCAN            reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    INT             reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    DOUBLE          reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    STRING          reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    VOID            reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    FOR             reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    WHILE           reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    MOVE            reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    ROTATE          reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    ARC             reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    HOME            reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    PDOWN           reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    PUP             reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    SETP            reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    PCOLOR          reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    PSIZE           reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    PCLEAR          reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    (               reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    CSTDOUBLE       reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    CSTINT          reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    CSTSTRING       reduce using rule 126 (statement -> geometry_statement SEMICOLON .)
    RBRACKET        reduce using rule 126 (statement -> geometry_statement SEMICOLON .)


state 172

    (115) pcolor -> PCOLOR ( . superexpression COMMA superexpression COMMA superexpression )
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 193
    term                           shift and go to state 49

state 173

    (81) loophead -> WHILE ( . seen_while_LPAR superexpression seen_while_exp )
    (85) seen_while_LPAR -> .

    (               reduce using rule 85 (seen_while_LPAR -> .)
    CSTDOUBLE       reduce using rule 85 (seen_while_LPAR -> .)
    CSTINT          reduce using rule 85 (seen_while_LPAR -> .)
    CSTSTRING       reduce using rule 85 (seen_while_LPAR -> .)
    ID              reduce using rule 85 (seen_while_LPAR -> .)

    seen_while_LPAR                shift and go to state 194

state 174

    (127) return -> RETURN superexpression . SEMICOLON

    SEMICOLON       shift and go to state 195


state 175

    (114) setp -> SETP ( . superexpression COMMA superexpression )
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 196
    term                           shift and go to state 49

state 176

    (80) loophead -> FOR ( . variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 )
    (32) variable_assignment -> . ID = superexpression

    ID              shift and go to state 197

    variable_assignment            shift and go to state 198

state 177

    (32) variable_assignment -> ID = . superexpression
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 199
    term                           shift and go to state 49

state 178

    (21) method_declaration3 -> ) seen_method_start block_statement .

    FUNC            reduce using rule 21 (method_declaration3 -> ) seen_method_start block_statement .)
    MAIN            reduce using rule 21 (method_declaration3 -> ) seen_method_start block_statement .)


state 179

    (75) arg -> numeric_expression seen_arg . more_args
    (77) more_args -> . COMMA arg
    (78) more_args -> . empty
    (128) empty -> .

    COMMA           shift and go to state 202
    )               reduce using rule 128 (empty -> .)

    more_args                      shift and go to state 200
    empty                          shift and go to state 201

state 180

    (71) function_call -> seen_func_id ( args ) .

    *               reduce using rule 71 (function_call -> seen_func_id ( args ) .)
    /               reduce using rule 71 (function_call -> seen_func_id ( args ) .)
    +               reduce using rule 71 (function_call -> seen_func_id ( args ) .)
    -               reduce using rule 71 (function_call -> seen_func_id ( args ) .)
    CEQ             reduce using rule 71 (function_call -> seen_func_id ( args ) .)
    CGT             reduce using rule 71 (function_call -> seen_func_id ( args ) .)
    CGE             reduce using rule 71 (function_call -> seen_func_id ( args ) .)
    CLT             reduce using rule 71 (function_call -> seen_func_id ( args ) .)
    CLE             reduce using rule 71 (function_call -> seen_func_id ( args ) .)
    CNE             reduce using rule 71 (function_call -> seen_func_id ( args ) .)
    AND             reduce using rule 71 (function_call -> seen_func_id ( args ) .)
    OR              reduce using rule 71 (function_call -> seen_func_id ( args ) .)
    COMMA           reduce using rule 71 (function_call -> seen_func_id ( args ) .)
    SEMICOLON       reduce using rule 71 (function_call -> seen_func_id ( args ) .)
    )               reduce using rule 71 (function_call -> seen_func_id ( args ) .)
    RSQUARE         reduce using rule 71 (function_call -> seen_func_id ( args ) .)


state 181

    (108) move -> MOVE ( superexpression . )

    )               shift and go to state 203


state 182

    (111) home -> HOME ( ) .

    SEMICOLON       reduce using rule 111 (home -> HOME ( ) .)


state 183

    (112) pdown -> PDOWN ( ) .

    SEMICOLON       reduce using rule 112 (pdown -> PDOWN ( ) .)


state 184

    (96) read_statement -> SCAN ( ID . ) SEMICOLON

    )               shift and go to state 204


state 185

    (113) pup -> PUP ( ) .

    SEMICOLON       reduce using rule 113 (pup -> PUP ( ) .)


state 186

    (116) psize -> PSIZE ( superexpression . )

    )               shift and go to state 205


state 187

    (79) loop_statement -> loophead block_statement seen_loop_block .

    ID              reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    IF              reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    RETURN          reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    PRINT           reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    SCAN            reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    INT             reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    DOUBLE          reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    STRING          reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    VOID            reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    FOR             reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    WHILE           reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    MOVE            reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    ROTATE          reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    ARC             reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    HOME            reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    PDOWN           reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    PUP             reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    SETP            reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    PCOLOR          reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    PSIZE           reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    PCLEAR          reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    (               reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    CSTDOUBLE       reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    CSTINT          reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    CSTSTRING       reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)
    RBRACKET        reduce using rule 79 (loop_statement -> loophead block_statement seen_loop_block .)


state 188

    (109) rotate -> ROTATE ( superexpression . )

    )               shift and go to state 206


state 189

    (97) print_statement -> PRINT ( superexpression . ) SEMICOLON

    )               shift and go to state 207


state 190

    (110) arc -> ARC ( superexpression . COMMA superexpression )

    COMMA           shift and go to state 208


state 191

    (117) pclear -> PCLEAR ( ) .

    SEMICOLON       reduce using rule 117 (pclear -> PCLEAR ( ) .)


state 192

    (88) if_statement -> IF ( superexpression . ) seen_condition block_statement seen_condition_block if_statement2

    )               shift and go to state 209


state 193

    (115) pcolor -> PCOLOR ( superexpression . COMMA superexpression COMMA superexpression )

    COMMA           shift and go to state 210


state 194

    (81) loophead -> WHILE ( seen_while_LPAR . superexpression seen_while_exp )
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 211
    term                           shift and go to state 49

state 195

    (127) return -> RETURN superexpression SEMICOLON .

    ID              reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    IF              reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    RETURN          reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    PRINT           reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    SCAN            reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    INT             reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    DOUBLE          reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    STRING          reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    VOID            reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    FOR             reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    WHILE           reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    MOVE            reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    ROTATE          reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    ARC             reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    HOME            reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    PDOWN           reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    PUP             reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    SETP            reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    PCOLOR          reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    PSIZE           reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    PCLEAR          reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    (               reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    CSTDOUBLE       reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    CSTINT          reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    CSTSTRING       reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)
    RBRACKET        reduce using rule 127 (return -> RETURN superexpression SEMICOLON .)


state 196

    (114) setp -> SETP ( superexpression . COMMA superexpression )

    COMMA           shift and go to state 212


state 197

    (32) variable_assignment -> ID . = superexpression

    =               shift and go to state 177


state 198

    (80) loophead -> FOR ( variable_assignment . seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 )
    (82) seen_assignment1 -> .

    SEMICOLON       reduce using rule 82 (seen_assignment1 -> .)

    seen_assignment1               shift and go to state 213

state 199

    (32) variable_assignment -> ID = superexpression .

    SEMICOLON       reduce using rule 32 (variable_assignment -> ID = superexpression .)
    )               reduce using rule 32 (variable_assignment -> ID = superexpression .)


state 200

    (75) arg -> numeric_expression seen_arg more_args .

    )               reduce using rule 75 (arg -> numeric_expression seen_arg more_args .)


state 201

    (78) more_args -> empty .

    )               reduce using rule 78 (more_args -> empty .)


state 202

    (77) more_args -> COMMA . arg
    (75) arg -> . numeric_expression seen_arg more_args
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 152
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    term                           shift and go to state 49
    arg                            shift and go to state 214

state 203

    (108) move -> MOVE ( superexpression ) .

    SEMICOLON       reduce using rule 108 (move -> MOVE ( superexpression ) .)


state 204

    (96) read_statement -> SCAN ( ID ) . SEMICOLON

    SEMICOLON       shift and go to state 215


state 205

    (116) psize -> PSIZE ( superexpression ) .

    SEMICOLON       reduce using rule 116 (psize -> PSIZE ( superexpression ) .)


state 206

    (109) rotate -> ROTATE ( superexpression ) .

    SEMICOLON       reduce using rule 109 (rotate -> ROTATE ( superexpression ) .)


state 207

    (97) print_statement -> PRINT ( superexpression ) . SEMICOLON

    SEMICOLON       shift and go to state 216


state 208

    (110) arc -> ARC ( superexpression COMMA . superexpression )
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 217
    term                           shift and go to state 49

state 209

    (88) if_statement -> IF ( superexpression ) . seen_condition block_statement seen_condition_block if_statement2
    (89) seen_condition -> .

    LBRACKET        reduce using rule 89 (seen_condition -> .)

    seen_condition                 shift and go to state 218

state 210

    (115) pcolor -> PCOLOR ( superexpression COMMA . superexpression COMMA superexpression )
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 219
    term                           shift and go to state 49

state 211

    (81) loophead -> WHILE ( seen_while_LPAR superexpression . seen_while_exp )
    (86) seen_while_exp -> .

    )               reduce using rule 86 (seen_while_exp -> .)

    seen_while_exp                 shift and go to state 220

state 212

    (114) setp -> SETP ( superexpression COMMA . superexpression )
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 221
    term                           shift and go to state 49

state 213

    (80) loophead -> FOR ( variable_assignment seen_assignment1 . SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 )

    SEMICOLON       shift and go to state 222


state 214

    (77) more_args -> COMMA arg .

    )               reduce using rule 77 (more_args -> COMMA arg .)


state 215

    (96) read_statement -> SCAN ( ID ) SEMICOLON .

    ID              reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    IF              reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    RETURN          reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    PRINT           reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    SCAN            reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    INT             reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    DOUBLE          reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    STRING          reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    VOID            reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    FOR             reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    WHILE           reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    MOVE            reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    ROTATE          reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    ARC             reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    HOME            reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    PDOWN           reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    PUP             reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    SETP            reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    PCOLOR          reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    PSIZE           reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    PCLEAR          reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    (               reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    CSTDOUBLE       reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    CSTINT          reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    CSTSTRING       reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)
    RBRACKET        reduce using rule 96 (read_statement -> SCAN ( ID ) SEMICOLON .)


state 216

    (97) print_statement -> PRINT ( superexpression ) SEMICOLON .

    ID              reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    IF              reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    RETURN          reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    PRINT           reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    SCAN            reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    INT             reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    DOUBLE          reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    STRING          reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    VOID            reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    FOR             reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    WHILE           reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    MOVE            reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    ROTATE          reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    ARC             reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    HOME            reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    PDOWN           reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    PUP             reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    SETP            reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    PCOLOR          reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    PSIZE           reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    PCLEAR          reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    (               reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    CSTDOUBLE       reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    CSTINT          reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    CSTSTRING       reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)
    RBRACKET        reduce using rule 97 (print_statement -> PRINT ( superexpression ) SEMICOLON .)


state 217

    (110) arc -> ARC ( superexpression COMMA superexpression . )

    )               shift and go to state 223


state 218

    (88) if_statement -> IF ( superexpression ) seen_condition . block_statement seen_condition_block if_statement2
    (93) block_statement -> . LBRACKET block_statement2 RBRACKET

    LBRACKET        shift and go to state 94

    block_statement                shift and go to state 224

state 219

    (115) pcolor -> PCOLOR ( superexpression COMMA superexpression . COMMA superexpression )

    COMMA           shift and go to state 225


state 220

    (81) loophead -> WHILE ( seen_while_LPAR superexpression seen_while_exp . )

    )               shift and go to state 226


state 221

    (114) setp -> SETP ( superexpression COMMA superexpression . )

    )               shift and go to state 227


state 222

    (80) loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON . superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 )
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 228
    term                           shift and go to state 49

state 223

    (110) arc -> ARC ( superexpression COMMA superexpression ) .

    SEMICOLON       reduce using rule 110 (arc -> ARC ( superexpression COMMA superexpression ) .)


state 224

    (88) if_statement -> IF ( superexpression ) seen_condition block_statement . seen_condition_block if_statement2
    (90) seen_condition_block -> .

    ELSE            reduce using rule 90 (seen_condition_block -> .)
    ID              reduce using rule 90 (seen_condition_block -> .)
    IF              reduce using rule 90 (seen_condition_block -> .)
    RETURN          reduce using rule 90 (seen_condition_block -> .)
    PRINT           reduce using rule 90 (seen_condition_block -> .)
    SCAN            reduce using rule 90 (seen_condition_block -> .)
    INT             reduce using rule 90 (seen_condition_block -> .)
    DOUBLE          reduce using rule 90 (seen_condition_block -> .)
    STRING          reduce using rule 90 (seen_condition_block -> .)
    VOID            reduce using rule 90 (seen_condition_block -> .)
    FOR             reduce using rule 90 (seen_condition_block -> .)
    WHILE           reduce using rule 90 (seen_condition_block -> .)
    MOVE            reduce using rule 90 (seen_condition_block -> .)
    ROTATE          reduce using rule 90 (seen_condition_block -> .)
    ARC             reduce using rule 90 (seen_condition_block -> .)
    HOME            reduce using rule 90 (seen_condition_block -> .)
    PDOWN           reduce using rule 90 (seen_condition_block -> .)
    PUP             reduce using rule 90 (seen_condition_block -> .)
    SETP            reduce using rule 90 (seen_condition_block -> .)
    PCOLOR          reduce using rule 90 (seen_condition_block -> .)
    PSIZE           reduce using rule 90 (seen_condition_block -> .)
    PCLEAR          reduce using rule 90 (seen_condition_block -> .)
    (               reduce using rule 90 (seen_condition_block -> .)
    CSTDOUBLE       reduce using rule 90 (seen_condition_block -> .)
    CSTINT          reduce using rule 90 (seen_condition_block -> .)
    CSTSTRING       reduce using rule 90 (seen_condition_block -> .)
    RBRACKET        reduce using rule 90 (seen_condition_block -> .)

    seen_condition_block           shift and go to state 229

state 225

    (115) pcolor -> PCOLOR ( superexpression COMMA superexpression COMMA . superexpression )
    (33) superexpression -> . expression superexpression2
    (38) expression -> . numeric_expression compare
    (48) numeric_expression -> . term seen_term numeric_expression2
    (54) term -> . factor term2
    (59) factor -> . cst_expression
    (60) factor -> . ( seen_lpar superexpression ) seen_rpar
    (63) cst_expression -> . CSTDOUBLE
    (64) cst_expression -> . CSTINT
    (65) cst_expression -> . CSTSTRING
    (66) cst_expression -> . ID seen_id_or_func cst_expression2

    (               shift and go to state 40
    CSTDOUBLE       shift and go to state 43
    CSTINT          shift and go to state 44
    CSTSTRING       shift and go to state 46
    ID              shift and go to state 48

    numeric_expression             shift and go to state 41
    expression                     shift and go to state 42
    cst_expression                 shift and go to state 39
    factor                         shift and go to state 45
    superexpression                shift and go to state 230
    term                           shift and go to state 49

state 226

    (81) loophead -> WHILE ( seen_while_LPAR superexpression seen_while_exp ) .

    LBRACKET        reduce using rule 81 (loophead -> WHILE ( seen_while_LPAR superexpression seen_while_exp ) .)


state 227

    (114) setp -> SETP ( superexpression COMMA superexpression ) .

    SEMICOLON       reduce using rule 114 (setp -> SETP ( superexpression COMMA superexpression ) .)


state 228

    (80) loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression . seen_for_exp SEMICOLON variable_assignment seen_assignment2 )
    (83) seen_for_exp -> .

    SEMICOLON       reduce using rule 83 (seen_for_exp -> .)

    seen_for_exp                   shift and go to state 231

state 229

    (88) if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block . if_statement2
    (91) if_statement2 -> . ELSE block_statement
    (92) if_statement2 -> . empty
    (128) empty -> .

    ELSE            shift and go to state 232
    ID              reduce using rule 128 (empty -> .)
    IF              reduce using rule 128 (empty -> .)
    RETURN          reduce using rule 128 (empty -> .)
    PRINT           reduce using rule 128 (empty -> .)
    SCAN            reduce using rule 128 (empty -> .)
    INT             reduce using rule 128 (empty -> .)
    DOUBLE          reduce using rule 128 (empty -> .)
    STRING          reduce using rule 128 (empty -> .)
    VOID            reduce using rule 128 (empty -> .)
    FOR             reduce using rule 128 (empty -> .)
    WHILE           reduce using rule 128 (empty -> .)
    MOVE            reduce using rule 128 (empty -> .)
    ROTATE          reduce using rule 128 (empty -> .)
    ARC             reduce using rule 128 (empty -> .)
    HOME            reduce using rule 128 (empty -> .)
    PDOWN           reduce using rule 128 (empty -> .)
    PUP             reduce using rule 128 (empty -> .)
    SETP            reduce using rule 128 (empty -> .)
    PCOLOR          reduce using rule 128 (empty -> .)
    PSIZE           reduce using rule 128 (empty -> .)
    PCLEAR          reduce using rule 128 (empty -> .)
    (               reduce using rule 128 (empty -> .)
    CSTDOUBLE       reduce using rule 128 (empty -> .)
    CSTINT          reduce using rule 128 (empty -> .)
    CSTSTRING       reduce using rule 128 (empty -> .)
    RBRACKET        reduce using rule 128 (empty -> .)

    if_statement2                  shift and go to state 233
    empty                          shift and go to state 234

state 230

    (115) pcolor -> PCOLOR ( superexpression COMMA superexpression COMMA superexpression . )

    )               shift and go to state 235


state 231

    (80) loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp . SEMICOLON variable_assignment seen_assignment2 )

    SEMICOLON       shift and go to state 236


state 232

    (91) if_statement2 -> ELSE . block_statement
    (93) block_statement -> . LBRACKET block_statement2 RBRACKET

    LBRACKET        shift and go to state 94

    block_statement                shift and go to state 237

state 233

    (88) if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .

    ID              reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    IF              reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    RETURN          reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    PRINT           reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    SCAN            reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    INT             reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    DOUBLE          reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    STRING          reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    VOID            reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    FOR             reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    WHILE           reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    MOVE            reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    ROTATE          reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    ARC             reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    HOME            reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    PDOWN           reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    PUP             reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    SETP            reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    PCOLOR          reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    PSIZE           reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    PCLEAR          reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    (               reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    CSTDOUBLE       reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    CSTINT          reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    CSTSTRING       reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)
    RBRACKET        reduce using rule 88 (if_statement -> IF ( superexpression ) seen_condition block_statement seen_condition_block if_statement2 .)


state 234

    (92) if_statement2 -> empty .

    ID              reduce using rule 92 (if_statement2 -> empty .)
    IF              reduce using rule 92 (if_statement2 -> empty .)
    RETURN          reduce using rule 92 (if_statement2 -> empty .)
    PRINT           reduce using rule 92 (if_statement2 -> empty .)
    SCAN            reduce using rule 92 (if_statement2 -> empty .)
    INT             reduce using rule 92 (if_statement2 -> empty .)
    DOUBLE          reduce using rule 92 (if_statement2 -> empty .)
    STRING          reduce using rule 92 (if_statement2 -> empty .)
    VOID            reduce using rule 92 (if_statement2 -> empty .)
    FOR             reduce using rule 92 (if_statement2 -> empty .)
    WHILE           reduce using rule 92 (if_statement2 -> empty .)
    MOVE            reduce using rule 92 (if_statement2 -> empty .)
    ROTATE          reduce using rule 92 (if_statement2 -> empty .)
    ARC             reduce using rule 92 (if_statement2 -> empty .)
    HOME            reduce using rule 92 (if_statement2 -> empty .)
    PDOWN           reduce using rule 92 (if_statement2 -> empty .)
    PUP             reduce using rule 92 (if_statement2 -> empty .)
    SETP            reduce using rule 92 (if_statement2 -> empty .)
    PCOLOR          reduce using rule 92 (if_statement2 -> empty .)
    PSIZE           reduce using rule 92 (if_statement2 -> empty .)
    PCLEAR          reduce using rule 92 (if_statement2 -> empty .)
    (               reduce using rule 92 (if_statement2 -> empty .)
    CSTDOUBLE       reduce using rule 92 (if_statement2 -> empty .)
    CSTINT          reduce using rule 92 (if_statement2 -> empty .)
    CSTSTRING       reduce using rule 92 (if_statement2 -> empty .)
    RBRACKET        reduce using rule 92 (if_statement2 -> empty .)


state 235

    (115) pcolor -> PCOLOR ( superexpression COMMA superexpression COMMA superexpression ) .

    SEMICOLON       reduce using rule 115 (pcolor -> PCOLOR ( superexpression COMMA superexpression COMMA superexpression ) .)


state 236

    (80) loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON . variable_assignment seen_assignment2 )
    (32) variable_assignment -> . ID = superexpression

    ID              shift and go to state 197

    variable_assignment            shift and go to state 238

state 237

    (91) if_statement2 -> ELSE block_statement .

    ID              reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    IF              reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    RETURN          reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    PRINT           reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    SCAN            reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    INT             reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    DOUBLE          reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    STRING          reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    VOID            reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    FOR             reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    WHILE           reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    MOVE            reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    ROTATE          reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    ARC             reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    HOME            reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    PDOWN           reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    PUP             reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    SETP            reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    PCOLOR          reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    PSIZE           reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    PCLEAR          reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    (               reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    CSTDOUBLE       reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    CSTINT          reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    CSTSTRING       reduce using rule 91 (if_statement2 -> ELSE block_statement .)
    RBRACKET        reduce using rule 91 (if_statement2 -> ELSE block_statement .)


state 238

    (80) loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment . seen_assignment2 )
    (84) seen_assignment2 -> .

    )               reduce using rule 84 (seen_assignment2 -> .)

    seen_assignment2               shift and go to state 239

state 239

    (80) loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 . )

    )               shift and go to state 240


state 240

    (80) loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 ) .

    LBRACKET        reduce using rule 80 (loophead -> FOR ( variable_assignment seen_assignment1 SEMICOLON superexpression seen_for_exp SEMICOLON variable_assignment seen_assignment2 ) .)

